{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":""},{"location":"about/","title":"About","text":"<p>To be created!</p>"},{"location":"Coding%20Interview/Code%20Snippet/Stack%2C%20Queue%2C%20and%20PriorityQueue/","title":"Stack, Queue, and PriorityQueue","text":""},{"location":"Coding%20Interview/Code%20Snippet/Stack%2C%20Queue%2C%20and%20PriorityQueue/#stack","title":"Stack","text":"<p><code>Stack</code> in Java is an old implementation that uses <code>Vector</code>. The modern one we should use is</p> <pre><code>Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\nstack.push(1);\nint value = stack.pop();\nint peekValue = stack.peek();\n</code></pre> <p>This is easier to remember than <code>addFirst(e)</code>, <code>removeFirst()</code>, and <code>peekFirst()</code></p>"},{"location":"Coding%20Interview/Code%20Snippet/Stack%2C%20Queue%2C%20and%20PriorityQueue/#queue","title":"Queue","text":"<p>The good thing of Java's implementation is <code>LinkedList</code> can be used as both stack and queue.</p> <pre><code>Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\n</code></pre> <p>Also, even better, <code>Deque</code> is sub interface of <code>Queue</code> so <code>Deque</code> actually has all queue operations as well as stack.</p> <pre><code>Deque&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\nqueue.add(1);\nint value = queue.remove();\nint peekValue = queue.peek();\n</code></pre> <p>In summary, we can use <code>LinkedList</code> with <code>Deque</code> interface as a stack or a queue. </p> <p>Stack</p> <ul> <li><code>stack.push(element)</code></li> <li><code>stack.pop()</code></li> <li><code>stack.peek()</code></li> </ul> <p>Queue</p> <ul> <li><code>queue.add(element)</code></li> <li><code>queue.remove()</code></li> <li><code>queue.peek()</code></li> </ul>"},{"location":"Coding%20Interview/Code%20Snippet/Stack%2C%20Queue%2C%20and%20PriorityQueue/#priorityqueue","title":"PriorityQueue","text":"<p>If we can skip <code>Heap</code> implementation, let's use <code>PriorityQueue</code></p> <p>It can be created from other collections like <pre><code>PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(Collection c);\nPriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(PriorityQueue c);\nPriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(SortedSet c);\n</code></pre></p> <p>Default sorting is <code>natural ordering</code>. In case we want custom or reverse order <pre><code>PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(Comparator c);\n// For example\nPriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;(Comparator.reverseOrder());\nPriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;((a, b) -&gt; b - a);\nPriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;((a, b) -&gt; b.compareTo(a);\n</code></pre></p> <p>Operations</p> <ul> <li><code>heap.add(element)</code></li> <li><code>heap.poll()</code></li> <li><code>heap.peek()</code></li> </ul>"},{"location":"Coding%20Interview/Patterns/01.%20Array%20and%20Hashing/","title":"01. Array and Hashing","text":"<ol> <li> <p>Use <code>HashMap</code> or <code>HashSet</code> to count/remember elements</p> <ul> <li>217. Contains Duplicate</li> <li>242. Valid Anagram</li> </ul> </li> <li> <p>While collecting data, we can calculate/check the element as well</p> <ul> <li>1. Two Sum</li> </ul> </li> <li> <p>Smart way to hash</p> <ul> <li>Use <code>char[] hash</code> that count frequency as hash string: 49. Group Anagrams</li> <li>Use string concat to create meaningful hash: 36. Valid Sudoku</li> <li>Use string length + separator to seperate words: 271. Encode and Decode Strings or 659 \u00b7 Encode and Decode Strings</li> </ul> </li> <li> <p>Multiple iterations </p> <ul> <li>Forward and backward: 238. Product of Array Except Self</li> <li>Use hashing with determistic sequence to search data: 128. Longest Consecutive Sequence</li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/02.%20Two%20Pointers/","title":"02. Two Pointers","text":"<ol> <li> <p>One forward, the other backward</p> <ul> <li>Move 2 pointers to meet the condition in the same loop<ul> <li>Move the pointer to point to the letter - 125. Valid Palindrome</li> <li>Move left pointer to increase sum; move right pointer to decrease sum - 167. Two Sum II - Input Array Is Sorted</li> </ul> </li> </ul> </li> <li> <p>Sort data first would help running pointer more meaningful</p> <ul> <li>15. 3Sum - Sort data, for each element search the other 2 using 2 pointers, skip duplicate for better performance</li> </ul> </li> <li> <p>Getting max value along the way</p> <ul> <li>11. Container With Most Water - Keep calculating amount of water from outside to inside, move the pointer with shorter value inside, update max value</li> <li>42. Trapping Rain Water - Keep track of max left and right, the water amount added = max - current on the smaller size, move the pointer on the smaller size.</li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/03.%20Sliding%20Window/","title":"03. Sliding Window","text":"<ol> <li> <p>Left and Right pointer go same direction</p> <ul> <li>121. Best Time to Buy and Sell Stock<ul> <li>Left = buy date, Right = sell date; right = left + 1</li> <li>Price right &gt; price left i.e. profit &gt; 0 -&gt; update max profit</li> <li>Otherwise, move left to right as now right will be the best buy date</li> <li>Right++</li> </ul> </li> <li>567. Permutation in String<ul> <li>Problem is to check if s2 contains permutation of s1 or not</li> <li>Create 'signature' using frequency from s1. <code>int[26]</code> is good</li> <li>Create 'signature' from string length = s1 from s2 assuming that s2 is longer</li> <li>Start from left = 0, right = s1.length(), create signature and compare</li> <li>Keep moving left and right, create signature, if match return true; otherwise, return false;</li> </ul> </li> </ul> </li> <li> <p>Set a rule of where the left/right is and move one to make condition true</p> <ul> <li> <p>3. Longest Substring Without Repeating Characters</p> <ul> <li>The rule is Left/Right = beginning/end of unique char; start both at 0</li> <li>Typically, move right til the end</li> <li>If moving right doesn't break the condition i.e. see unseen char, keep moving</li> <li>If moving right break the condition i.e. see seen char, <ul> <li>Need to fix it by moving left</li> <li>Move left until seeing the char that right see and plus 1 to make the string from left to right unique</li> </ul> </li> <li>Calculate max when moving right where the length increase</li> </ul> </li> <li> <p>424. Longest Repeating Character Replacement</p> <ul> <li>The rule is Left/Right = beginning/end of char that can be replaced within k times</li> <li>The calculation is <ul> <li>length = right - left + 1</li> <li>length - max frequency char &lt;= k then it's good</li> </ul> </li> <li>Add right count first if the condition is valid keep moving right</li> <li>Otherwise, move left until it's valid</li> <li>Keep track of count; increase freq when moving right, decrease freq when moving left</li> <li>There is a tricky way not to use max freq of all char. Using max so far works too.</li> </ul> </li> <li> <p>76. Minimum Window Substring</p> <ul> <li>Returns minimum substring of s that has all chars in t</li> <li>The rule is Left/Right = beginning/end of the substring that covers all chars in t</li> <li>Keep moving right until the substring covers t</li> <li>Then, shrink left until the substring doesn't cover t</li> <li>Calculate minLength along the way</li> <li>The substring trick is to <ul> <li>Count freq of t in <code>int[256]</code> (lower/uppercases)</li> <li>Right move -&gt; decrease the count (char in s that is not in t will be &lt; 0)</li> <li>Left move -&gt; increase the count (char in s that is not in t will never be &gt; 0)</li> <li>Have <code>int match</code> to keep counting how manay chars matches: increase/decrease only if count &gt; 0</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>It may come with usage of other data structure ...</p> <ul> <li>239. Sliding Window Maximum<ul> <li>Given and array of int and <code>k</code> as int, return max of value of the sliding window k</li> <li>The sliding window here is obvious as just shifting left/right to be size k along the input array</li> <li>The issue is how to get the max value of the window. </li> <li>The most intuitive one is to use max heap. But, we need heap size <code>k</code> and <code>k</code> can be really large</li> <li>The trick is to use monotonic decreasing queue where the head is the max value and the subsequent elements will be less</li> <li>When adding, remove all elements that is less than the number to be added</li> <li>When removing, remove if the head of the queue = the number at the left index</li> <li>Keep collecting the answer at the head of the queue</li> </ul> </li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/04.%20Stack/","title":"04. Stack","text":"<ol> <li> <p>Basic Stack usage</p> <ul> <li>20. Valid Parentheses</li> <li>150. Evaluate Reverse Polish Notation</li> </ul> </li> <li> <p>FIFO property can be helpful</p> <ul> <li>155. Min Stack<ul> <li>Implement a stack that can also return min value</li> <li>The trick is the top value saw all the elements in the past so attaching min value so far with the element help returning min at O(n)</li> </ul> </li> </ul> </li> <li> <p>Monotonic Stack</p> <ul> <li> <p>739. Daily Temperatures</p> <ul> <li>Given an array of temperatures, return number of days have to wait for warmer temperatures</li> <li>Use monotonic stack to keep track of position <code>i</code></li> <li>Add data backward, pop the day that has lower or equal temperature. So, the bottom of the stack is the warmest day</li> <li>The diff of the index will be the number of wait days</li> </ul> </li> <li> <p>853. Car Fleet</p> <ul> <li>Given an array of positions and speeds of cars and target distance, return the number of car fleet.</li> <li>The rule is if one car reach the other in front, they will merge into one. The fleet's speed will be the one in front i.e. the slower one</li> <li>To know if cars will be merged or not, we need to calculate time each car reaching the destination. Faster car has lower amount of time</li> <li>Also, we need to sort the car by position</li> <li>Use the monotonic stack to kee track of time. The car that has lower time i.e. faster car will be removed as it will be merged with the slower one</li> <li>The result will be the size of the stack</li> </ul> </li> <li> <p>84. Largest Rectangle in Histogram</p> <ul> <li>Given an array of heights of histogram, returns the largest rectangle</li> <li>If the height of the current bar is lower than the previous, the current bar will block the size of the rectangle</li> <li>Use the stack to keep track of increasing heights only. Pop out all the one that are taller than the current one</li> <li>The logic to calculate rectangle could be complicated. Need to read the solution again.</li> </ul> </li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/05.%20Binary%20Search/","title":"05. Binary Search","text":"<ol> <li> <p>Basic binary search</p> <ul> <li>Remember the loop <pre><code>    while (start &lt;= end) {\nint mid = start + (end - start) / 2; // mid at size/2 round down\nif (nums[mid] == target) return mid;\nif (nums[mid] &lt; target) start = mid + 1;\nelse\nend = mid - 1;\n}\n</code></pre></li> <li>704. Binary Search</li> <li>74. Search a 2D Matrix<ul> <li>Items sorted and arranged in 2D matrix</li> <li>Stretch it out as 1D by having a formula to map mid point to row/col</li> </ul> </li> </ul> </li> <li> <p>It can help brute forcing solution</p> <ul> <li>875. Koko Eating Bananas<ul> <li>Given a array of banana pile and <code>h</code> as no. of hour til guard is back, return mininum no. of banana per hour <code>k</code> that Koko can eat all the piles before the guard is back</li> <li>The slowest speed is 1 per hour</li> <li>The fastest speed is the max of banana pile i.e. Koko will spend time eating equal to number of piles </li> <li>We keep searching for the slowest speed</li> <li>Have a function to calculate hour spent if Koko eat at <code>k</code> speed</li> <li>Use binary search to scope the speed down</li> </ul> </li> </ul> </li> <li> <p>Fancy ways to cut data in half</p> <ul> <li>153. Find Minimum in Rotated Sorted Array<ul> <li>Given a sorted array that was rotated, return the min number</li> <li>The trick is how to know which side to keep left or right?</li> <li>If the 'crack' is on the left i.e. mid &lt; right, search left -&gt; mid</li> <li>If the 'crack' is on the right i.e. mid &gt; right, search mid + 1 -&gt; right</li> <li>Search until left == right i.e. the bottom of the crack</li> </ul> </li> <li>33. Search in Rotated Sorted Array<ul> <li>Given a sorted array that was rotated, search index of the <code>target</code> value using binary search</li> <li>The trick is how to know which side to keep left or right? Same as above</li> <li>If 'crack' is on the left i.e. mid &lt; right<ul> <li>If mid &lt; target &lt; right i.e. target is in the slope from mid to right -&gt; search mid+1 -&gt; right</li> <li>Else i.e. target is in the crack side -&gt; search left -&gt; mid-1</li> </ul> </li> <li>If 'crack' is on the right i.e. mid &gt; right<ul> <li>If left &lt; target &lt; mid i.e. target is in the slop from left to mid -&gt; search left -&gt; mid-1</li> <li>Else i.e. target is in the crack side -&gt; search mid+1 -&gt; right</li> </ul> </li> </ul> </li> <li>658. Find K Closest Elements<ul> <li>Given a sorted array <code>arr[]</code>, returns a subarray size <code>k</code> that minimum sum of the 'distance' to <code>x</code> i.e. <code>|arr[i] - x|</code> </li> <li>For example <ul> <li>Input: <code>arr = [1,2,3,4,5], k = 4, x = 3</code> </li> <li>Output: <code>[1,2,3,4]</code></li> </ul> </li> <li>The trick is to use binary search to adjust the window</li> <li>If the distance of <code>mid</code> &gt; the distance of <code>mid+k</code> -&gt; left = mid+1;</li> <li>Else -&gt; right = mid</li> <li>The answer is array from <code>arr[left]</code> - <code>arr[left+k]</code></li> </ul> </li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/06.%20LinkedList/","title":"06. LinkedList","text":"<ol> <li> <p>Find mid of the linked list</p> <ul> <li>Create 2 pointers - slow and fast - slow moves 1 node and fast moves 2 nodes</li> <li>Start slow and fast at head</li> <li>Keep moving fast and slow if fast.next != null &amp;&amp; fast.next.next != null</li> <li>The mid is at slow one - Note that the slow is the greater one e.g. if there are 3 elements the mid one is at the 2nd element</li> </ul> </li> <li> <p>Reverse linked list</p> <ul> <li>206. Reverse Linked List<ul> <li>Given head of linked list, reverse the linked list</li> <li>The trick is having 3 pointers - prevHead, head, and headNext/temp</li> <li>Keep moving head, for each head<ul> <li>Save head.next to headNext/temp</li> <li>Make head.next point to prevHead - This is to reverse the pointer</li> <li>Move prevHead -&gt; head</li> <li>Move head -&gt; headNext/temp that we saved earlier</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Dummy node as pre head</p> <ul> <li> <p>21. Merge Two Sorted Lists</p> <ul> <li>Given 2 sorted linked lists, merge them into 1 sorted linked list</li> <li>Create a dummy node for easy code; otherwise, we need to check null case</li> <li>Make current pointer at the dummy node</li> <li>Point the current.next point to the min one - either list1 or list2 - and move that one to the next</li> <li>Move current to current.next</li> <li>Like merge sort, there could be either list1 or list2 left, make current.next point to the non-null one</li> <li>Finally, the root is at dummy.next</li> </ul> </li> <li> <p>143. Reorder List</p> <ul> <li>Give a linked list, reorder them by <code>0 -&gt; n -&gt; 1 -&gt; n-1 -&gt; 2 -&gt; n-2 ...</code></li> <li>The trick is to break half of the list and reverse it; find mid and reverse</li> <li>To merge 2 lists, it's similar to the question above.</li> <li>Create a dummy node and create a current starting at the dummy</li> <li>Add list1 and if list2 is not null add list2 as well, given that list2 is shorter or equal to list1 at max</li> </ul> </li> <li> <p>19. Remove Nth Node From End of List</p> <ul> <li>Given a linked list and <code>n</code>, remove the <code>nth</code> node from the end of the list</li> <li>Create a dummy node</li> <li>Start <code>slow</code> and <code>fast</code> at the dummy node</li> <li>Move <code>fast</code> for <code>n</code> times</li> <li>Then, move both <code>slow</code> and <code>fast</code> at the same time until <code>fast</code> reaches the end</li> <li><code>slow</code> should be 'before' the target node; <code>slow.next = slow.next.next</code></li> </ul> </li> </ul> </li> <li> <p>Deep copy linked list with random pointer</p> <ul> <li>138. Copy List with Random Pointer<ul> <li>Given a head to special linked list that has <code>next</code> and <code>random</code> pointer, return head of a deep copy linked list</li> <li>The trick is to make sure not to recreate the node that we already copied by saving in a map of old node -&gt; new node</li> <li>Keep traversing and copying; there are 2 ways<ul> <li>My way <ul> <li>Get or Clone <code>current</code> (next pointer) and <code>random</code></li> <li>Point <code>newCurrent.random</code> to <code>newRandom</code></li> <li>Move pointer to both original and clone one using <code>next</code> pointer path</li> </ul> </li> <li>NeetCode way <ul> <li>Clone all of the original ones and save in the map</li> <li>Go through the original one again, now we have all the clones one in the map, link them</li> <li>The new head will be <code>map.get(head)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Number operations in linked list</p> <ul> <li>2. Add Two Numbers<ul> <li>Given 2 linked lists containing digits in reverse order, return a new linked list containing the sum of the 2</li> <li><code>2 -&gt; 4 -&gt; 3</code> and <code>5 -&gt; 6 -&gt; 4</code> return <code>7 -&gt; 0 -&gt; 8</code> because 342 + 465 = 807</li> <li>Since the lists are in reverse order, we can calculate from head</li> <li>The trick is <ul> <li>Don't forget the carry number; it can be the last one that we need to create</li> <li>Simple idea is to have 3 loops - both not null, remainder list, and carry. We could merge them in to 1 loop by keep doing if <code>l1</code> not null || <code>l2</code> not null || carry &gt; 0, and inside the loop make null value as 0 so the calculation stays the same</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Linked list problem in an array form</p> <ul> <li>287. Find the Duplicate Number<ul> <li>Given an array size <code>n+1</code> containing number between 1-n, find duplicate number; there is only one duplicate number</li> <li>This is linked list problem where you can jump to the next index starting from index 0</li> <li>The trick is the duplicate number creates loop and we need to find the start of the loop</li> <li>The way to find the start of the loop is do 2 steps<ul> <li>Do slow/fast pointer to stop when the loop is detected</li> <li>Create another pointer starting at head i.e. index 0; move it along with the slow pointer; when both meet that's where the loop start</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Patterns/10.%20Backtracking/","title":"10. Backtracking","text":"<p>22. Generate Parentheses</p>"},{"location":"Coding%20Interview/Patterns/14.%20Interval/","title":"14. Interval","text":"<ol> <li> <p>Check overlapping intervals</p> <ul> <li>Use negative logic is easier to understand</li> <li>2 intervals are NOT overlapping if <ul> <li>End of the first &lt; Start of the second <code>&lt;--1--&gt;     &lt;--2--&gt;</code>  OR</li> <li>End of the second &lt; Start of the first <code>&lt;--2--&gt;     &lt;--1--&gt;</code></li> </ul> </li> <li>So 2 intervals are touching/overlapping if the above condition is not true <pre><code>    boolean overlapping(Interval interval1, Interval interval2) {\nreturn !(interval1.start() &lt; interval2.end() || interval2.start() &lt; interval1.end());\n}\n</code></pre></li> </ul> </li> <li> <p>Sorted intervals by start time helps a lot</p> <ul> <li>57. Insert Interval<ul> <li>Given intervals sorted by start time and a new interval to insert, insert the new interval and merge with the existing one</li> <li>There are 3 possible sections <ul> <li>Intervals that are not overlapping with the new interval and the start time is before</li> <li>Intervals that are overlapping with the new interval</li> <li>Intervals that are not overlapping with the new interval and the start time is after</li> </ul> </li> <li>Best to deal with them in 3 section separately</li> <li>The first section, add the interval to the answer list directly until the interval is overlapping</li> <li>The second section, keep merging until the interval is not overlapping; then add the merge result to the answer list</li> <li>The last section, add the interval to the answer list directly until the end of the data</li> <li>Be careful the edge case where the interval array is empty but the new interval is not</li> </ul> </li> </ul> </li> </ol>"},{"location":"Coding%20Interview/Problems/HR/plus_minus/","title":"Plus Minus","text":""},{"location":"Coding%20Interview/Problems/HR/plus_minus/#problem","title":"Problem","text":"<p>Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with 6 places after the decimal.</p>"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution","title":"Solution","text":"<p>The calculation is simple. The key is to format the number correctly. As all of us know, double/float in Java can be weird.</p>"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution-1-use-printf-formatting","title":"Solution 1: Use <code>printf</code> formatting","text":"<p>Calculate the percentage normall and use <code>printf</code> formatting to format the number. This is probably the most straightforward way to solve this problem <pre><code>    public static void plusMinus(List&lt;Integer&gt; arr) {\ndouble p = 0, n = 0, z = 0;\nfor (int i : arr) {\nif (i == 0) z++;\nelse if (i &lt; 0) n++;\nelse if (i &gt; 0) p++;\n}\nSystem.out.printf(\"%8.6f\\n\", p/arr.size());\nSystem.out.printf(\"%8.6f\\n\", n/arr.size());\nSystem.out.printf(\"%8.6f\\n\", z/arr.size());\n}\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution-2-use-bigdecimal","title":"Solution 2: Use <code>BigDecimal</code>","text":"<p>We can use <code>BigDecimal</code> to do calculation with speficy precision. This is probably a bit overkill for interview solution. But, use BigDecimal is a good practice if your appliation is related to cost or money where it has a specific way to round the number.</p> <p>Note that when dividing numbers using BigDecimal, we should always set <code>scale</code> otherwise it can throws <code>ArithmeticException</code> as by default it will try to return exact precision.</p> <pre><code>    public static void plusMinus(List&lt;Integer&gt; arr) {\nint p = 0, n = 0, z = 0;\nfor (int i : arr) {\nif (i == 0) z++;\nelse if (i &lt; 0) n++;\nelse if (i &gt; 0) p++;\n}\nBigDecimal size = BigDecimal.valueOf(arr.size());\nSystem.out.println(BigDecimal.valueOf(p).divide(size, 6, RoundingMode.HALF_UP));\nSystem.out.println(BigDecimal.valueOf(n).divide(size, 6, RoundingMode.HALF_UP));\nSystem.out.println(BigDecimal.valueOf(z).divide(size, 6, RoundingMode.HALF_UP));\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0001.%20Two%20Sum/","title":"0001. Two Sum","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0001.%20Two%20Sum/#problem","title":"Problem","text":"<p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p> <pre><code>class Solution {\npublic int[] twoSum(int[] nums, int target) {\n}\n}\n</code></pre> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre> <p>Example 2:</p> <p><pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</code></pre> Example 3:</p> <pre><code>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</code></pre> <p>Constraints: <pre><code>    2 &lt;= nums.length &lt;= 104\n    -109 &lt;= nums[i] &lt;= 109\n    -109 &lt;= target &lt;= 109\n    Only one valid answer exists.\n</code></pre></p> <p>Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0001.%20Two%20Sum/#approaches","title":"Approaches","text":"<p>Brute force approach</p> <ul> <li>For <code>nums[i]</code>, go through all other elements <code>nums[j]</code> if <code>nums[i]</code> + <code>nums[j]</code> == target</li> <li>This is O(n^2) solution</li> </ul> <p>Idea improve - We want to find <code>target - nums[i]</code> value quickly - We can use Set or Map to collect data so checking if <code>target - nums[i]</code> exists can be O(n). This will make the whole solution O(n) - Simple approach is to   - Go through <code>nums</code> to collect data with position in a Map   - Go through <code>nums</code> again to find the match from the Map previously created - However, we could go through <code>nums</code> in one go by checking the target then add to the Map <pre><code>index                                   i\nnums[] = { &lt;nums already saved in Map&gt;, X, &lt;nums not parsing yet&gt;}\n\nif target - X is in the Map\n    return { position of 'target - X', i}\nelse\n    Map.put(X, i)\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0001.%20Two%20Sum/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic int[] twoSum(int[] nums, int target) {\nMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\nfor (int i=0; i&lt;nums.length; i++) {\nInteger pos = map.get(target - nums[i]);\nif (pos != null) {\nreturn new int[] {pos, i};\n} map.put(nums[i], i);\n}\n// This shouldn't happen\nreturn null;\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0015.%203Sum/","title":"0015. 3Sum","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0015.%203Sum/#problem","title":"Problem","text":"<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p>Example 1: <pre><code>Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\n</code></pre> Example 2: <pre><code>Input: nums = []\nOutput: []\n</code></pre> Example 3: <pre><code>Input: nums = [0]\nOutput: []\n</code></pre></p> <p>Constraints:</p> <ul> <li>0 &lt;= nums.length &lt;= 3000</li> <li>-10^5 &lt;= nums[i] &lt;= 10^5</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0015.%203Sum/#approaches","title":"Approaches","text":"<ul> <li>Brute force approach would be O(n^3) as we search for <code>i</code>, <code>j</code>, and <code>k</code> from n elements</li> <li>Breaking the problem using 2 sum solution DOES NOT work</li> <li>This question needs value, not index</li> <li>This question needs unique set of values</li> <li>The approach is to sort the number first. This would help finding target number easier</li> <li>Once we have sorted <code>nums[]</code>, for <code>nums[i]</code>, we have 2 pointers <code>j</code> starts at <code>i+1</code> and <code>k</code> starts at <code>nums.length-1</code></li> <li>Then, we will check if <code>nums[i] + nums[j] + nums[k]</code> is equal to 0 or not</li> <li>If so, we save the 3 values in the result bucket and move both pointer; move <code>j</code> forward and move <code>k</code> backward</li> <li>If the sum is &gt; 0, we move <code>k</code> backward only to reduce the sum</li> <li>If the sum is &lt; 0, we move <code>j</code> forward only to reduce the sum</li> <li>Continue until <code>j</code> reaches <code>k</code> i.e. <code>j &gt;= k</code></li> <li>The test cases in LC has a lot of duplicate. So we can shorten run time by skipping the loop when</li> <li><code>nums[i]</code> has been already considered i.e. <code>nums[i] == nums[i-1]</code></li> <li>Similary, when moving <code>j</code> or <code>k</code>, if we already consider the same values i.e. <code>nums[j] == nums[j-1]</code> or <code>nums[k] == nums[k+1]</code></li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0015.%203Sum/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\nSet&lt;List&lt;Integer&gt;&gt; result = new HashSet&lt;&gt;();\nArrays.sort(nums);\nfor (int i=0; i&lt;nums.length-2; i++) {\n// Skip dup i\nif (i &gt; 0 &amp;&amp; nums[i] == nums[i-1]) continue;\nint j = i+1;\nint k = nums.length-1;\nwhile(j&lt;k) {\nint sum = nums[i] + nums[j] + nums[k];\nif (sum == 0) {\nresult.add(Arrays.asList(nums[i], nums[j++], nums[k--]));\n// Skip dup j and k\nwhile (j&lt;k &amp;&amp; nums[j] == nums[j-1]) j++;\nwhile (j&lt;k &amp;&amp; nums[k] == nums[k+1]) k--;\n} else if (sum &gt; 0) {\nk--;\n// Skip dup k\nwhile (j&lt;k &amp;&amp; nums[k] == nums[k+1]) k--;\n} else {\nj++;\n// Skip dup j\nwhile (j&lt;k &amp;&amp; nums[j] == nums[j-1]) j++;\n}\n}\n}\nreturn new ArrayList&lt;&gt;(result);\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0020.%20Valid%20Parentheses/","title":"0020. Valid Parentheses","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0020.%20Valid%20Parentheses/#problem","title":"Problem","text":"<p>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p> <p>An input string is valid if:</p> <pre><code>Open brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\n</code></pre> <p>Example 1: <pre><code>Input: s = \"()\"\nOutput: true\n</code></pre></p> <p>Example 2: <pre><code>Input: s = \"()[]{}\"\nOutput: true\n</code></pre></p> <p>Example 3: <pre><code>Input: s = \"(]\"\nOutput: false\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0020.%20Valid%20Parentheses/#approaches","title":"Approaches","text":"<ul> <li>This is classic usage of Stack</li> <li>Go through each char of the input. </li> <li>If the char is one of the 'open' brackets, push it to the stack</li> <li>If the char is out of the 'close' brackets, pop a char from the stack<ul> <li>If they don't match, return false</li> </ul> </li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0020.%20Valid%20Parentheses/#solution","title":"Solution","text":"<p>class Solution {     public boolean isValid(String s) {         Deque stack = new LinkedList&lt;&gt;(); <pre><code>    for (char c : s.toCharArray()) {\n        if (open(c)) {\n            stack.push(c);\n        } else if (close(c)) {\n            if (stack.isEmpty() || !match(stack.pop(), c)) {\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n\npublic boolean open(char c) {\n    return c == '(' || c == '[' || c == '{';\n}\n\npublic boolean close(char c) {\n    return c == ')' || c == ']' || c == '}';\n}\n\npublic boolean match(char open, char close) {\n    return (open == '(' &amp;&amp; close == ')') ||\n        (open == '[' &amp;&amp; close == ']') ||\n        (open == '{' &amp;&amp; close == '}');\n}\n</code></pre> <p>}</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0031.%20Next%20Permutation/","title":"0031. Next Permutation","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0031.%20Next%20Permutation/#problem","title":"Problem","text":"<p>A permutation of an array of integers is an arrangement of its members into a sequence or linear order.</p> <pre><code>For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\n</code></pre> <p>The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p> <pre><code>For example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n</code></pre> <p>Given an array of integers nums, find the next permutation of nums.</p> <p>The replacement must be in place and use only constant extra memory.</p> <p>Example 1: <pre><code>Input: nums = [1,2,3]\nOutput: [1,3,2]\n</code></pre> Example 2: <pre><code>Input: nums = [3,2,1]\nOutput: [1,2,3]\n</code></pre> Example 3: <pre><code>Input: nums = [1,1,5]\nOutput: [1,5,1]\n</code></pre></p> <p>Constraints:</p> <pre><code>1 &lt;= nums.length &lt;= 100\n0 &lt;= nums[i] &lt;= 100\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0049.%20Group%20Anagrams/","title":"0049. Group Anagrams","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0049.%20Group%20Anagrams/#problem","title":"Problem","text":"<p>Given an array of strings strs, group the anagrams together. You can return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>Example 1: <pre><code>Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</code></pre> Example 2: <pre><code>Input: strs = [\"\"]\nOutput: [[\"\"]]\n</code></pre> Example 3: <pre><code>Input: strs = [\"a\"]\nOutput: [[\"a\"]]\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= strs.length &lt;= 10^4\n    0 &lt;= strs[i].length &lt;= 100\n    strs[i] consists of lowercase English letters.\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0049.%20Group%20Anagrams/#approach","title":"Approach","text":"<ul> <li>Words can be grouped together if they have same char frequency</li> <li>Another idea is they are equal after sorted</li> <li>How can we find the 'hashcode' of each word easily?</li> <li>2 approaches</li> <li>Since words consits of lowercase only, we can do counting sort so it will be <code>O(n)</code> not <code>O(n log n)</code>. The sorted word will be the 'hashcode'</li> <li>Use frequency saved in <code>char[26]</code> and convert this array to <code>String</code> as the hashcode</li> <li></li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0049.%20Group%20Anagrams/#solution","title":"Solution","text":"<pre><code>// Counting sort\nclass Solution {\npublic List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\nMap&lt;String, List&lt;String&gt;&gt; groups = new HashMap&lt;&gt;();\nfor (String s : strs) {\nString sortedString = sort(s);\ngroups.computeIfAbsent(sortedString, k -&gt; new ArrayList&lt;&gt;()).add(s);\n}\nreturn new ArrayList&lt;&gt;(groups.values());\n}\npublic String sort(String word) {\nint[] chars = new int[26];\nfor (char c : word.toCharArray()) {\nchars[c - 'a']++;\n}\nStringBuffer sb = new StringBuffer();\nfor (int i=0; i&lt;chars.length; i++) {\nfor (int j=0; j&lt;chars[i]; j++) {\nsb.append((char) ('a' + i));\n}\n}\nreturn sb.toString();\n}\n}\n</code></pre> <pre><code>// Use char[] as hash\nclass Solution {\npublic List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\nMap&lt;String, List&lt;String&gt;&gt; groups = new HashMap&lt;&gt;();\nfor (String s : strs) {\nString hashCode = hash(s);\ngroups.computeIfAbsent(hashCode, k -&gt; new ArrayList&lt;&gt;()).add(s);\n}\nreturn groups.values().stream().collect(Collectors.toList());\n}\npublic String hash(String word) {\nchar[] hash = new char[26];\nfor (char c : word.toCharArray()) {\nhash[c - 'a']++;\n}\nreturn new String(hash);\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0053.%20Maximum%20Subarray/","title":"0053. Maximum Subarray","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0053.%20Maximum%20Subarray/#problem","title":"Problem","text":"<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p> <p>A subarray is a contiguous part of an array.</p> <p>Example 1: <pre><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n</code></pre></p> <p>Example 2: <pre><code>Input: nums = [1]\nOutput: 1\n</code></pre> Example 3: <pre><code>Input: nums = [5,4,-1,7,8]\nOutput: 23\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= nums.length &lt;= 10^5\n    -10^4 &lt;= nums[i] &lt;= 10^4\n</code></pre></p> <p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0053.%20Maximum%20Subarray/#approaches","title":"Approaches","text":"<ul> <li>This can be really headache to think than it should be</li> <li>Imagine we have a 'chain' of numbers that can be summed to a number.</li> <li>When should we include <code>nums[i]</code> in the chain? When the previous change + <code>nums[i]</code> is better</li> <li>We can use dynamic programming approach. Let <code>dp[i]</code> is the max sequence til <code>nums[i]</code></li> <li><code>dp[i]</code> is the max of</li> <li><code>dp[i-1]</code> -&gt; <code>nums[i]</code> is not included</li> <li>max sequence ends at <code>i-1</code> + <code>nums[i]</code> -&gt; <code>nums[i]</code> is included with the adjacent sequence</li> <li><code>nums[i]</code> -&gt; <code>nums[i]</code> over power the previously found so far</li> <li>We can pull the last 2 which is the problem of finding the 'max sequence end at <code>i</code>' as the main problem itself and the total max can be just the max of sequenc ends at <code>i</code> for all <code>i</code></li> <li>So, finally, we can let <code>dp[i]</code> is the max sequence that ends at index <code>i</code></li> <li>for all <code>i</code><ul> <li><code>dp[i]</code> is max between <code>dp[i-1] + nums[i]</code> and <code>nums[i]</code></li> <li><code>answer</code> is the max of all <code>dp[i]</code></li> </ul> </li> <li>Since DP here is using just previous value so we don't need a full array for this</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0053.%20Maximum%20Subarray/#solution","title":"Solution","text":"<p>class Solution {     public int maxSubArray(int[] nums) {         int result = Integer.MIN_VALUE;         int dp = 0;         for (int n : nums) {             dp = Math.max(dp + n, n);             result = Math.max(result, dp);         }         return result;     } }</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/","title":"0121. Best Time to Buy and Sell Stock","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#problem","title":"Problem","text":"<p>You are given an array prices where prices[i] is the price of a given stock on the ith day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.</p> <p>Example 1: <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</code></pre></p> <p>Example 2: <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= prices.length &lt;= 105\n    0 &lt;= prices[i] &lt;= 104\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#approaches","title":"Approaches","text":"<ul> <li>The max profit would be from \"somewhat\" min and max price day</li> <li>We can only gain the profit only if the min is on the day before the max</li> <li>Brute force solution</li> <li>Pick a buy date <code>i</code> from <code>0</code> -&gt; <code>n - 2</code>. Last day can't be buy date.</li> <li>Let's <code>j</code> is a date after <code>i</code> i.e. from <code>i+1</code> -&gt; <code>n-1</code>. Calculate and get max of <code>prices[j] - price[i]</code></li> <li>O(n^2)</li> <li>Where to optimize?</li> <li>Consider DP approach where <code>DP(i)</code> = max profit of day <code>i</code></li> <li>Max profit of day <code>i</code> can be either <ul> <li>The max profit of day <code>i-1</code> i.e. the price at day <code>i</code> is not high enough to create new max profit</li> <li>OR ... the price at day <code>i</code> can create new max profit i.e. <code>prices[i]</code> - min price so far &gt; current max profit</li> </ul> </li> <li>If we go left to right, the history that matters is <ul> <li>The min price as this is the 'best' buy date</li> <li>The max profit as to keep track of the answer</li> </ul> </li> <li>This way we can go through the prices only once</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic int maxProfit(int[] prices) {\nint min = Integer.MAX_VALUE;\nint maxProfit = 0;\nfor (int p : prices) {\nmaxProfit = Math.max(maxProfit, p - min);\nmin = Math.min(min, p);\n}\nreturn maxProfit;\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/","title":"0128. Longest Consecutive Sequence","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/#problem","title":"Problem","text":"<p>Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.</p> <p>You must write an algorithm that runs in O(n) time.</p> <p>Example 1: <pre><code>Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n</code></pre> Example 2: <pre><code>Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n</code></pre></p> <p>Constraints: <pre><code>    0 &lt;= nums.length &lt;= 10^5\n    -10^9 &lt;= nums[i] &lt;= 10^9\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/#approach","title":"Approach","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/#union-find","title":"Union Find","text":"<ul> <li>The ask is to have <code>O(n)</code> run time so this is going to be parsing through the array</li> <li>The number in the consecutive sequence can be in any order. So to answer if adding number <code>nums[i]</code> would increase any previos sequence or not we need to store pretty much all the sequence so far. </li> <li>The previous sequence could be as short as 1 so using DP to save something like 'max so far' would not work here</li> <li>The problem her is like a grouping. See</li> </ul> <p><pre><code>      &lt; seq 1&gt;    &lt;--- seq 2 ---&gt; ... &lt;--- seq n ---&gt;                \n  Adding X, would X \n      1) Join any existing sequence?\n         1.1) If so, does X join 2 sequences to be 1 single sequence?\n      2) Or, X can't join any sequence and create a new one?\n</code></pre> - Naively we could save 'ranges' of the sequences so far and check if X can join any of them or not - A better way is to use 'Union Find' to join them together - The algorithm is following     - Create a <code>Map&lt;Integer, Integer&gt;</code> that maps num to parent     - For <code>nums[i]</code>, create a new entry and make the number as its own parent     - If there is <code>nums[i] - 1</code> or <code>nums[i]+1</code> in the map, update their parent to be <code>nums[i]</code>     - This will join the 'tree' of consecutive number together using the latest number as new root</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/#counting","title":"Counting","text":"<ul> <li>The previous approach is generic in the sense that it can be used to group any thing</li> <li>Since this problem can be grouped by consecutive number, we can just rely on math to find/connect groups</li> <li>We can have a <code>Map&lt;Integer, Boolean&gt;</code> to track what number we seen has been already count</li> <li>For <code>nums[i]</code>, we count forward and backward. We flip the flag when counting so we don't count them again.</li> <li>Note that I thought of using <code>Set</code> instead but removing element from a <code>Set</code> while iterating can cause an exception</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0128.%20Longest%20Consecutive%20Sequence/#solution","title":"Solution","text":"<pre><code>// Basic Union Find\nclass Solution {\npublic int longestConsecutive(int[] nums) {\nMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\nfor (int n : nums) {\nmap.put(n, n);\nif (map.containsKey(n - 1)) {\nint root = findRoot(n - 1, map);\nmap.put(root, n);\n}\nif (map.containsKey(n + 1)) {\nint root = findRoot(n - 1, map);\nmap.put(root, n);\n}\n}\nMap&lt;Integer, Integer&gt; count = new HashMap&lt;&gt;();\nint result = Integer.MIN_VALUE;\nfor (int n : map.keySet()) {\nint root = findRoot(n, map);\nint countSoFar = count.getOrDefault(root, 0) + 1;\ncount.put(root, countSoFar);\nresult = Math.max(result, countSoFar);\n}\nreturn result;\n}       public int findRoot(int n, Map&lt;Integer, Integer&gt; map) {\nint root = map.get(n);\nwhile (root != n) {\nroot = map.get(n);\n}\nreturn root;\n}\n}\n</code></pre> <pre><code>// Counting\nclass Solution {\npublic int longestConsecutive(int[] nums) {\nif (nums.length &lt; 2) return nums.length;\nMap&lt;Integer, Boolean&gt; map = new HashMap&lt;&gt;();\nfor (int n : nums) {\nif (map.containsKey(n)) continue;\nmap.put(n, false);\n}\nint max = Integer.MIN_VALUE;\nfor (int n : nums) {\nif (map.get(n)) continue;\nmap.put(n, true);\nint count = 1;\nint i = n - 1;\nwhile (map.containsKey(i)) {\nmap.put(i, true);\ni--;\ncount++;\n}\ni = n + 1;\nwhile (map.containsKey(i)) {\nmap.put(i, true);\ni++;\ncount++;\n}\nmax = Math.max(max, count);\n}\nreturn max;\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0217.%20Contains%20Duplicate/","title":"0217. Contains Duplicate","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0217.%20Contains%20Duplicate/#problem","title":"Problem","text":"<p>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.</p> <p>Example 1: <pre><code>Input: nums = [1,2,3,1]\nOutput: true\n</code></pre></p> <p>Example 2: <pre><code>Input: nums = [1,2,3,4]\nOutput: false\n</code></pre></p> <p>Example 3: <pre><code>Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= nums.length &lt;= 105\n    -109 &lt;= nums[i] &lt;= 109\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0217.%20Contains%20Duplicate/#approaches","title":"Approaches","text":"<ul> <li>We need a 'tally marks' that keep tracks of appearance</li> <li>Since the requirement is just 'at least twice', we don't need to actually count. We could just do 'seen' and 'unseen' - 2 states. Using <code>Set&lt;Integer&gt;</code> would be enough</li> <li>And the requirement is to return boolean, no need to collect all the 'non-distinct' values, we can short cut returning true once we run into an already 'seen' one</li> <li>We can go through the list</li> <li>If seen, return true</li> <li>If not seen, add the number into the Set</li> <li>One trick for Set in java is <code>add()</code> method return true if this set did not already contain the specified element. So we can shorten the code a little bit.</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0217.%20Contains%20Duplicate/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic boolean containsDuplicate(int[] nums) {\nSet&lt;Integer&gt; seen = new HashSet&lt;Integer&gt;();\nfor (int num : nums) {\nif (!seen.add(num)) return true;\n}\nreturn false;\n}\n} </code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0238.%20Product%20of%20Array%20Except%20Self/","title":"0238. Product of Array Except Self","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0238.%20Product%20of%20Array%20Except%20Self/#problem","title":"Problem","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1: <pre><code>Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n</code></pre> Example 2: <pre><code>Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n</code></pre></p> <p>Constraints: <pre><code>    2 &lt;= nums.length &lt;= 10^5\n    -30 &lt;= nums[i] &lt;= 30\n    The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n</code></pre></p> <p>Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0238.%20Product%20of%20Array%20Except%20Self/#approaches","title":"Approaches","text":"<ul> <li>The brute force approach would be for each <code>nums[i]</code> calculating the product by going through the nums again. This approach is O(n^2)</li> <li>What we can better is to save the product value to be reused</li> <li>Consider, the <code>answer[i]</code> is the product of <code>nums[0]</code> - <code>nums[i-1]</code> x the product of <code>nums[i+1]</code> - <code>nums[n-1]</code> <pre><code>  &lt;- product before -&gt; i &lt;- product after -&gt;\n</code></pre></li> <li>Looping forward, we can get the product til <code>i</code> so we can get the 'product before' part</li> <li>Looping backward then would give us the 'product after'</li> <li>We can combine the two to get the answer</li> <li> <p>For example <pre><code>nums                          [ 1, 2, 3, 4]\nForward                       [ *, 1, 2, 6]\nBackward                      [24,12, 4, *]\nAnswer = Forward x Backward = [24,12, 8, 6]\n\nNeed to init * as 1 so we can multiple them all\n</code></pre></p> </li> <li> <p>The approach uses 3 arrays so space is O(3n)</p> </li> <li>To reduce this we can do in place calculation in the answer array itself</li> <li>For the forward loop, we can still do the same <pre><code>nums                          [ 1, 2, 3, 4]\nAnswer                        [ *, 1, 2, 6]\n</code></pre></li> <li>For the backward loop, we need to keep track of the total product so far because we don't have extra array to save</li> <li>Let's have <code>right</code> var to keep track of the total product backward. Then we can update the answer array by multiply <code>answer[i]</code> with <code>right</code> <pre><code>nums                          [ 1, 2, 3, 4]\nAnswer                        [ *, 1, 2, 6]\nright                          24,12, 4, *  \nAnswer                        [24,12, 8, 6]\n</code></pre></li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0238.%20Product%20of%20Array%20Except%20Self/#solution","title":"Solution","text":"<p><pre><code>// O(n) space solution\nclass Solution {\npublic int[] productExceptSelf(int[] nums) {\nint[] forward = new int[nums.length];\nint[] backward = new int[nums.length];\nint[] answer = new int[nums.length];\nforward[0] = backward[nums.length - 1] = 1;\nfor (int i=1; i&lt;nums.length; i++) {\nforward[i] = forward[i-1] * nums[i-1];\n}\nfor (int i=nums.length-2; i&gt;=0; i--) {\nbackward[i] = backward[i+1] * nums[i+1];\n}\nfor (int i=0; i&lt;nums.length; i++) {\nanswer[i] = forward[i] * backward[i];\n}\nreturn answer;\n}\n}\n</code></pre> <pre><code>// O(1) space solution\nclass Solution {\npublic int[] productExceptSelf(int[] nums) {\nint[] answer = new int[nums.length];\nanswer[0] = 1;\nfor (int i=1; i&lt;nums.length; i++) {\nanswer[i] = answer[i-1] * nums[i-1];\n}\nint right = 1;\nfor (int i=nums.length-2; i&gt;=0; i--) {\nright *= nums[i+1];\nanswer[i] *= right;\n}\nreturn answer;\n}\n}\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/0242.%20Valid%20Anagram/","title":"0242. Valid Anagram","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0242.%20Valid%20Anagram/#problem","title":"Problem","text":"<p>Given two strings s and t, return true if t is an anagram of s, and false otherwise.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>Example 1:</p> <pre><code>Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\n</code></pre> <p>Example 2: <pre><code>Input: s = \"rat\", t = \"car\"\nOutput: false\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= s.length, t.length &lt;= 5 * 104\n    s and t consist of lowercase English letters.\n</code></pre></p> <p>Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0242.%20Valid%20Anagram/#approaches","title":"Approaches","text":"<ul> <li><code>s</code> is an anagram of <code>t</code> if <code>s</code> has same frequency/count of character exactly same as that of <code>t</code></li> <li>We can do 'tally marks' of <code>s</code> in a <code>Map&lt;Character, Integer&gt;</code></li> <li>Next, we go through each character in <code>t</code> and 'unmark'</li> <li>If there is a char in <code>t</code> that missing in the 'tally marks' OR there is any character left in the 'tally marks' then <code>s</code> is not an anagram of <code>t</code></li> <li>Using <code>Map&lt;Character, Integer&gt;</code> should be able to handle unicode. Otherwise, an array of <code>int[]</code> covering all know char i.e. size = 26 to cover all lower case here should be enough</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0242.%20Valid%20Anagram/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic boolean isAnagram(String s, String t) {\nMap&lt;Character, Integer&gt; count = new HashMap&lt;&gt;();\nfor (char c : s.toCharArray()) {\ncount.put(c, count.getOrDefault(c, 0) + 1);\n}\nfor (char c : t.toCharArray()) {\nif (!count.containsKey(c)) {\nreturn false;\n}\nint freq = count.get(c) - 1;\nif (freq == 0) {\ncount.remove(c);\n} else {\ncount.put(c, freq);\n}\n}\nreturn count.size() == 0;\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0347.%20Top%20K%20Frequent%20Elements/","title":"0347. Top K Frequent Elements","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0347.%20Top%20K%20Frequent%20Elements/#problem","title":"Problem","text":"<p>Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.</p> <p>Example 1: <pre><code>Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n</code></pre> Example 2: <pre><code>Input: nums = [1], k = 1\nOutput: [1]\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= nums.length &lt;= 10^5\n    k is in the range [1, the number of unique elements in the array].\n    It is guaranteed that the answer is unique.\n</code></pre></p> <p>Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.</p>"},{"location":"Coding%20Interview/Problems/LeetCode/0347.%20Top%20K%20Frequent%20Elements/#approaches","title":"Approaches","text":"<ul> <li>We need to know the frequency so first loop would be counting</li> <li>Intuitively, we can just sort the frequency from max -&gt; min and get the top <code>k</code> for the answer</li> <li>This approach would be <code>O(n)</code> for collecting frequency + <code>O(n log n)</code> for sorting the frequency</li> <li>However, the question states explicitly that the solution should be faster than <code>O(n log n)</code> so we need a better solution</li> <li>Note that we don't need to sort them all. We want 'max' values for <code>k</code> times</li> <li>This fits perfectly with Heap. Another approach is to do one-sided quick sort</li> <li>We can throw frequency data in to a max heap and pull the max value <code>k</code> time</li> <li>Run time complexity<ul> <li>Building heap is <code>O(n)</code> NOT <code>O(n log n)</code> as it may seems. READ MORE ABOUT HEAPIFY!<ul> <li>The main reason is that we need to do heapify only the first half only as the bottom half are leaves</li> <li>For the first half that we need to do comparison, it's based on the height of the element. The higher the height the lower the number of element</li> <li>The total no. of comparison is still less than <code>n</code></li> </ul> </li> <li>Pulling max value is <code>O(log n)</code> as we <code>siftDown</code>. We do this <code>k</code> times so it's <code>O(k log n)</code></li> <li>Total is <code>O(n) + O(k log n)</code></li> </ul> </li> <li>NeedCode has example of using minHeap and keep pruning the min value if the heap has element &gt; <code>k</code></li> <li>We can also try to build heap ourselves if we want</li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/0347.%20Top%20K%20Frequent%20Elements/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic int[] topKFrequent(int[] nums, int k) {\nPriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; heap = new PriorityQueue&lt;&gt;((a, b) -&gt; b.getValue() - a.getValue());\nMap&lt;Integer, Integer&gt; freqs = new HashMap&lt;&gt;();\nfor (int n : nums) {\nfreqs.put(n, freqs.getOrDefault(n, 0) + 1);\n}\nheap.addAll(freqs.entrySet());\nint[] result = new int[k];\nfor (int i=0; i&lt;k; i++) {\nresult[i] = heap.poll().getKey();\n}\nreturn result;\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/0950.%20Reveal%20Cards%20In%20Increasing%20Order/","title":"0950. Reveal Cards In Increasing Order","text":""},{"location":"Coding%20Interview/Problems/LeetCode/0950.%20Reveal%20Cards%20In%20Increasing%20Order/#problem","title":"Problem","text":"<p>You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].</p> <p>You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.</p> <p>You will do the following steps repeatedly until all cards are revealed:</p> <pre><code>Take the top card of the deck, reveal it, and take it out of the deck.\nIf there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\nIf there are still unrevealed cards, go back to step 1. Otherwise, stop.\n</code></pre> <p>Return an ordering of the deck that would reveal the cards in increasing order.</p> <p>Note that the first entry in the answer is considered to be the top of the deck.</p> <p>Example 1: <pre><code>Input: deck = [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation: \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n</code></pre></p> <p>Example 2: <pre><code>Input: deck = [1,1000]\nOutput: [1,1000]\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= deck.length &lt;= 1000\n    1 &lt;= deck[i] &lt;= 106\n    All the values of deck are unique.\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/1143.%20Longest%20Common%20Subsequence/","title":"1143. Longest Common Subsequence","text":""},{"location":"Coding%20Interview/Problems/LeetCode/1143.%20Longest%20Common%20Subsequence/#problem","title":"Problem","text":"<p>Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <pre><code>For example, \"ace\" is a subsequence of \"abcde\".\n</code></pre> <p>A common subsequence of two strings is a subsequence that is common to both strings.</p> <p>Example 1: <pre><code>Input: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n</code></pre> Example 2: <pre><code>Input: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n</code></pre> Example 3: <pre><code>Input: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= text1.length, text2.length &lt;= 1000\n    text1 and text2 consist of only lowercase English characters.\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/1143.%20Longest%20Common%20Subsequence/#approaches","title":"Approaches","text":"<ul> <li>Intuitively, we can have 2 pointers - <code>i</code> for text1 and <code>j</code> for text2 - that we can go through each char of both text</li> <li>For each <code>i</code> and <code>j</code>,</li> <li>if <code>text1[i]</code> == <code>text2[j]</code> then the sequence increase by 1 i.e. <code>dp[i][j]</code> = <code>dp[i-1][j-1] + 1</code></li> <li>they are not equal then the max sequence at <code>i</code> and <code>j</code> is max of <code>dp[i-1][j]</code> + <code>dp[][j-1]</code></li> <li>From the equation above, <code>dp[i][j]</code> requires previous 3 - UP, LEFT, and UP-LEFT <pre><code>dp array\n\n      j 0 1 2 3 4 ...\n    i 0 A B       ...          \n      1 C X\n      2   \n      3 \n      4 \n     ...\n</code></pre></li> <li>From example above, X is calculated from <code>A</code>, <code>B</code>, and <code>C</code></li> <li>If we start from <code>dp[0][0]</code> for the first char of both texts, we will need special check when it hit boundary</li> <li>We could add additional row/col and start first char of both texts at <code>dp[1][1]</code> instead to avoid special case like this <pre><code>dp array\n\n      j 0 1 2 3 4 ... text2.length()\n      0 0 0 0 0 0 ...       .   \n      1 0 . . . .           .\n      2 0 . . . .           . \n    i 3 0 . . . .           .\n      4 0 . . . .           .\n     ...\ntext1.length()              X\n\nX, which is the answer, is at dp[text1.length()][text2.length()]\n</code></pre></li> </ul>"},{"location":"Coding%20Interview/Problems/LeetCode/1143.%20Longest%20Common%20Subsequence/#solution","title":"Solution","text":"<pre><code>class Solution {\npublic int longestCommonSubsequence(String text1, String text2) {\nint dp[][] = new int[text1.length()+1][text2.length()+1];\nfor (int i=0; i&lt;text1.length(); i++) {\nfor (int j=0; j&lt;text2.length(); j++) {\nif (text1.charAt(i) == text2.charAt(j)) {\ndp[i+1][j+1] = dp[i][j] + 1;\n} else {\ndp[i+1][j+1] = Math.max(dp[i][j+1], dp[i+1][j]);\n}\n}\n} return dp[text1.length()][text2.length()];\n}\n}\n</code></pre>"},{"location":"Coding%20Interview/Problems/LeetCode/1713.%20Minimum%20Operations%20to%20Make%20a%20Subsequence/","title":"1713. Minimum Operations to Make a Subsequence","text":""},{"location":"Coding%20Interview/Problems/LeetCode/1713.%20Minimum%20Operations%20to%20Make%20a%20Subsequence/#problem","title":"Problem","text":"<p>You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.</p> <p>In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.</p> <p>Return the minimum number of operations needed to make target a subsequence of arr.</p> <p>A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.</p> <p>Example 1: <pre><code>Input: target = [5,1,3], arr = [9,4,2,3,4]\nOutput: 2\nExplanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.\n</code></pre> Example 2: <pre><code>Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]\nOutput: 3\n</code></pre></p> <p>Constraints: <pre><code>    1 &lt;= target.length, arr.length &lt;= 10^5\n    1 &lt;= target[i], arr[i] &lt;= 10^9\n    target contains no duplicates.\n</code></pre></p>"},{"location":"Coding%20Interview/Problems/LeetCode/2191.%20Sort%20the%20Jumbled%20Numbers/","title":"2191. Sort the Jumbled Numbers","text":""},{"location":"Coding%20Interview/Problems/LeetCode/2191.%20Sort%20the%20Jumbled%20Numbers/#problem","title":"Problem","text":"<p>You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.</p> <p>The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 &lt;= i &lt;= 9.</p> <p>You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.</p> <p>Notes: - Elements with the same mapped values should appear in the same relative order as in the input. - The elements of nums should only be sorted based on their mapped values and not be replaced by them.</p> <p>Example 1: <pre><code>Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]\nOutput: [338,38,991]\nExplanation: \nMap the number 991 as follows:\n1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.\n2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.\nTherefore, the mapped value of 991 is 669.\n338 maps to 007, or 7 after removing the leading zeros.\n38 maps to 07, which is also 7 after removing leading zeros.\nSince 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.\nThus, the sorted array is [338,38,991].\n</code></pre></p> <p>Example 2: <pre><code>Input: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]\nOutput: [123,456,789]\nExplanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].\n</code></pre></p> <p>Constraints: <pre><code>    mapping.length == 10\n    0 &lt;= mapping[i] &lt;= 9\n    All the values of mapping[i] are unique.\n    1 &lt;= nums.length &lt;= 3 * 104\n    0 &lt;= nums[i] &lt; 10^9\n</code></pre></p>"},{"location":"Coding%20Interview/System%20Design/Cheat%20Sheet/","title":"Cheat Sheet","text":"<ol> <li> <p>Requirements and Scope (3-10 minutes)</p> <ul> <li>Functional Requirements<ul> <li>Data: CRUD + Search</li> <li>User: Sign Up/In</li> <li>Notification</li> <li>Metrics/Analytics - Business value metrics</li> <li>Localization: Language, Location, Different kind of content</li> <li>Personalization: Usage history, Friends/Follower</li> </ul> </li> <li>Non-functional Requirements<ul> <li>Availability/Latency/Consistency</li> <li>Different functions/users need differently</li> </ul> </li> <li>Find key requirements and draw scope line</li> </ul> </li> <li> <p>Capacity Estimation (3-5 minutes)</p> <ul> <li>TPS<ul> <li>Ask/Assume a number: active users, interaction per day, etc</li> <li>Calculate to TPS: day / 24 / 3600 = second or / 100k round up</li> </ul> </li> <li>Storage<ul> <li>Assume size of the data: record breakdown</li> <li>How long we need to keep the data?</li> </ul> </li> <li>Peak = Estimate x 2</li> <li>Downtime 99.9% = 1.44 minutes/day = 8.77 hours/year</li> <li>1 Million = 1MB, 1 Billion = 1 GB, 1 Trillion = 1 TB, 1 Quadrillion = 1 PB</li> </ul> </li> <li> <p>High Level Design (5-10 minutes)</p> <ul> <li>Draw Components: clients, service, database, cache, CDN, message queue</li> <li>Database Types: SQL/NoSQL/Graph/Mix</li> <li>Offer Alternatives</li> </ul> </li> <li> <p>Design Deep Dive (10-25 minutes)</p> <ul> <li>Ask/Assume priority</li> <li>Bottle necks and scaling</li> <li>Algorithm/API</li> <li>Data Flow</li> <li>Connection</li> </ul> </li> <li> <p>Wrap Up (3-5 minutes)</p> <ul> <li>Review the key design decisions and how they address the problem</li> <li>Components/Use cases worth exploring but didn't have time</li> </ul> </li> </ol>"},{"location":"Coding%20Interview/System%20Design/Patterns/01.%20Unique%20ID%20Generator/","title":"01. Unique ID Generator","text":""},{"location":"Coding%20Interview/System%20Design/Patterns/01.%20Unique%20ID%20Generator/#problem","title":"Problem","text":"<p>The system needs a globally unique ID</p>"},{"location":"Coding%20Interview/System%20Design/Patterns/01.%20Unique%20ID%20Generator/#solution","title":"Solution","text":"<ol> <li> <p>Database's auto increment</p> <ul> <li>Pros: Easy to implement for a single server</li> <li>Cons: Hard to scale with multiple DB servers. May be able to do odd/even but doesn't scale well</li> </ul> </li> <li> <p>UUID</p> <ul> <li>Pros: Easy to implement; Hard to have collision</li> <li>Cons: Can't use ID to sort; UUID is long (16 chars - 128 bits)</li> </ul> </li> <li> <p>Ticket Server</p> <ul> <li>Pros: Easy to implement; Numeric/Sortable</li> <li>Cons: Single point of failure; Hard to scale</li> </ul> </li> <li> <p>Twitter snowflake</p> </li> </ol> <p>The trick is to break 64 bits into sections - timestamp|data center ID|server ID|sequence number     - Sign bit (1 bit) - Always 0. Reserved for signed/unsigned cases in the future     - Timestamp (41 bits) - Covers around 70 years. Use custom epoch     - Data center ID (5 bits) - Covers 32 data centers     - Machine ID (5 bits) - Covers 32 servers / data centers     - Sequence Number (12 bits) - Covers 4k / second</p> <pre><code>- Pros: Numeric/Sortable; Scalable as we can have multiple ID generating servers\n- Cons: Hard to implement; Clock synchronization\n</code></pre> <ol> <li>Key Generator Server</li> </ol> <p>The trick is to pre-generate unique keys and save them in the database to make sure to key reuse. The key can be numbers or unique string. </p> <pre><code>- Pros: Can cache/preload into the server with specific range that needs the key; The key can be 'returned/recycled'\n- Cons: Single point of failure; Need a replica; Needs a lot of space to store all possible keys\n</code></pre> <p>## Usage     - Tiny URL - Convert ID to String using base 62 (0-9, a-b, A-Z)</p>"},{"location":"Coding%20Interview/System%20Design/Patterns/02.%20News%20Feed/","title":"02. News Feed","text":""},{"location":"Coding%20Interview/System%20Design/Patterns/02.%20News%20Feed/#problem","title":"Problem","text":"<p>Design newsfeed where users can see posts that the user follows. Posts can also contains photos, video, likes, etc.</p>"},{"location":"Coding%20Interview/System%20Design/Patterns/02.%20News%20Feed/#key-requirements","title":"Key Requirements","text":"<ul> <li>Functional<ul> <li>Users can post content including photos, video</li> <li>Users can get news feed in reverse chronological order</li> <li>Users can see friends posts (people/pages that the user follow) in the feed</li> </ul> </li> <li>Non-Functional<ul> <li>Read &gt; Write</li> <li>Availability, Latency &gt; Consistency</li> </ul> </li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/02.%20News%20Feed/#key-design-point","title":"Key Design Point","text":"<ul> <li>Get feed quickly<ul> <li>Generate feed offline - Have a dedicate service that generate feed for each user in memory</li> <li>LRU for cache policy</li> <li>Adjust cache size i.e. number of posts in cache per user behavior</li> <li>This cache can be partitioned by user id, ultimately consistent hashing</li> </ul> </li> <li> <p>Push a post to followers</p> <ul> <li>Pull or Fanout on read<ul> <li>Newsfeed is generated during read time</li> <li>Save resources; no hot key problem on the user who has a lot of followers</li> <li>Hard to find a right cadance</li> </ul> </li> <li>Push or Fanout on write<ul> <li>Newsfeed is generated durint write time i.e. the follower' cache is updated immediately</li> <li>Followers get post near realtime</li> <li>Hot key problem on the celebrity</li> </ul> </li> <li>Hybrid<ul> <li>Push for majority of users. Pull for celebrity.</li> </ul> </li> <li>Another approach could be push only for online users; Need web sockets keep tracking online users</li> </ul> </li> <li> <p>Feed ranking</p> <ul> <li>Bottom line is the creation time but it can include other factor as well</li> <li>It's better to make a separate service</li> </ul> </li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/02.%20News%20Feed/#solution","title":"Solution","text":"<ul> <li>API<ul> <li>publishPost - This is simple; just post the content</li> <li>getFeed - The API should accept from/to. The size of the feed per page can depend on client type (mobile vs desktop)</li> </ul> </li> <li> <p>Storage design</p> <ul> <li>Relational DB for Users/Entity/Relationship as they have clear relationship; GraphDB can be used as well</li> <li>Relational DB for Posts</li> <li>S3 for media contents</li> </ul> </li> <li></li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/","title":"Distributed Message Queue","text":""},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/#why-message-queue","title":"Why message queue?","text":"<ul> <li>Synchronous communication has issues<ul> <li>Slow consumers slow down producers; tightly couple</li> <li>Hard to retry failures</li> <li>Hard to limit number of requests</li> </ul> </li> <li>Asynchronous helps<ul> <li>Producers don't need to wait for the response</li> <li>Easy to scale; scaling queues and scaling consumers</li> </ul> </li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/#propertiesrequirements-of-message-queue","title":"Properties/Requirements of message queue","text":"<ul> <li>Send/Receive message</li> <li>Scalability - handle load increases</li> <li>Availability - Survive hardware/network failure</li> <li>Performance</li> <li>Reliability/Durability - No message lost</li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/#component","title":"Component?","text":"<pre><code>   Producer\n      |\n      +--------------- Frontend  ----------------- Backend (a lot of hosts)\n      |                    | \n   Consumer         Metadata Service\n                           |\n                      Metadata DB\n</code></pre>"},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/#component-details","title":"Component Details","text":"<ul> <li>Frontend<ul> <li>Serving API for both producers and consumers</li> <li>Sit behind VIP/Load Balancer</li> <li>TLS termination</li> <li>Caching</li> <li>Authentication/Authorization</li> <li>Request handling - Rate limit, Dedup, Encryption, Circuit breaker</li> <li>Data collection</li> </ul> </li> <li>Metadata DB and Metadate service<ul> <li>DB keeps tracking queue information</li> <li>Read &gt; Write - Read when message arrive to get queue information from queue ID, Write only when the new queue is created</li> <li>The service serves as cache</li> <li>RelationalDB is fine</li> <li>Options to scale metadata service<ul> <li>Replicate servers with loadbalancer - All servers are same</li> <li>Simple hash - Frontend knows what Metadata server to talkt to for queue ID X</li> <li>Metadata service knows themselves - Frontend calls any metadata server; the server will automatically reroute the request</li> </ul> </li> </ul> </li> <li>Message storage<ul> <li>Memory and disk on the backend hosts! - This will make it fast</li> <li>Replicate data among backend hosts</li> <li>Metadata service will determine which host has message for the queue ID</li> </ul> </li> <li>Backend<ul> <li>Hosts can be grouped as clusters</li> <li>Metadata knows what cluster handle what queue</li> <li>There will be 2 'cluster managers' that handles<ul> <li>In-cluster i.e. hosts inside the cluster<ul> <li>Host assignment</li> <li>List of hosts in a cluster</li> <li>Host heartbeat</li> </ul> </li> <li>Out-cluster i.e. clusters management<ul> <li>Cluster assignment for a queue id</li> <li>List of clusters</li> <li>Cluster heartbeats</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Coding%20Interview/System%20Design/Patterns/Distributed%20Message%20Queue/#what-else","title":"What else?","text":""},{"location":"Entertainment/Games/Championship%20Manager/cm0102/","title":"Championship Manager 01/02","text":""},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#installation","title":"Installation","text":"<p>Download ISO and DB patch (v.3.9.68) from https://www.myabandonware.com/game/championship-manager-season-01-02-a2h</p> <p>Download Nick's patch from github https://github.com/nckstwrt/CM0102Patcher. Recommended pathes are</p> <ul> <li>Enable coloured attributes - Higher attributes will be using different color</li> <li>Enable idle sensititvity - Game will use less CPU. This is really useful when running on wine.</li> <li>Enable 7 substitues</li> <li>Show star players - You want to know who is the best right?</li> <li>Show hidden attributes - This is useful tos injury prone, consistency, big match, and 1:1 for GK</li> <li>Disable unprotected contract - I hate losing players coz the unprotected contract rules</li> <li>Remove UK 3 foreign player limit</li> <li>EEC Patch (Under 'Tools') - Make all nations in EU</li> <li>Mics Patches/Uncap20s.patch (Under 'Misc Pathes') - Some players have higher value than 20. This patch will allow us to see that.</li> <li>Mics Patches/SeeAnytTeamsFinancesV2.patch (Under 'Mics Pathes') - See how rich other clubs are so we can get as much money as possible from them.</li> <li>Misc Pathces/GiveMoreOptionsInOfferDropDownV2.pathc - More options in the dropdown when offering to buy a player</li> </ul>"},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#tipstricks","title":"Tips/Tricks","text":""},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#selling-player","title":"Selling player","text":"<p>To sell players for higher transfer fee,</p> <ul> <li>When a club made an offer, negotiate by exchanging a player. They will come back with a better deal</li> <li>For players who are in national team already (i.e. the player will for sure play in the national team soon and somewhat famous)</li> <li>Set the player's value low (like 1m) and put the player in transfer list. Many clubs will be interested in the player due to the lower fee.</li> <li>When a club made an offer, keep the transfer fee low but negotiate with a lot of fee for 'Fee after 1 Internal Apps'. We will get money just when the player plays in national team, which is typically a few months away</li> <li>The club will agree to the negotiation based on pretty much the money they have available, not the player's real value</li> </ul> <p>I used this trick to sell Biscan and Babbel for 1m+95m each from Barcelona. This can be an exceptional case though as most clubs could effort only about ~20m to 40m max.</p>"},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#buying-player","title":"Buying player","text":"<p>In case your club is not famous, players may not even want to talk to the club. In such case, we can't do anything. </p> <p>But, if we can still make an offer, but the player states that he is not interested to join your club. You can do the following</p> <ul> <li>Set 'Weekly Wage' a bit lower than your target (but not too low that the player would reject)</li> <li>Increase 'Signing on Fee'. Double the default value</li> <li>Reduce the 'Contract Expires' to 'Month-to-Month'. This short period will make the player interested in</li> </ul> <p>Once the transfer is done, the player will be under 'rolling contract' state so you will need to offer a long term contract. This is when you should bump up the 'Weekly Wage' a bit more to match the player's request. This is the reason to push the wage of the first contract lower so you have room to increase here. (Unless you are willing to pay the player a lot and no need to control your budget)</p> <p>This trick requires paying multiple sign on fee so you should do this with a key player when you have enough money.</p>"},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#my-starting-save","title":"My starting save","text":"<p>This is my note on my save playing Liverpool at the start of the season. This save has shortlisted, bidded, and put some players on transfer list. I am selling Babbel, Biscan, and Hamann. They can make a lot of money and I plan to buy some players to replace them</p> <p>The following are teams that making offer and the max fee they would accept</p> <ul> <li>Barcelona - 1+95m</li> <li>Real Madred - 1+85m</li> <li>Valencia - 1+40m</li> <li>Dortmund - 1+20m</li> <li>Bayern - 1+20m</li> <li>Porto - 1+6m (Xavier)</li> <li>Racing - 1+6m (Xavier)</li> <li>Lille - 1+6m (Xavier)</li> </ul> <p>For this save, I would aim to get </p> <ul> <li>1+95m for Babble from Barcelona </li> <li>1+85m for Biscan from Real Madrid (or actually I got 1+95m from Barcelona)</li> <li>1+40m for Hamann from Valencia</li> <li>~1+5m for Xavier</li> </ul> <p>I could drain a lot of money from Barcelona they will have financial crisis later. This allowed me to buy their player for cheap like Saviola and Riquelme</p>"},{"location":"Entertainment/Games/Championship%20Manager/cm0102/#my-favorite-players","title":"My favorite players","text":"<p>The following players that I like to buy. Note that not including the famous ones though</p> <ul> <li>Anastasios Skalidis (19) - Super Greek striker. He doesn't want to join Liverpool in the first season. Try to buy him in 2nd season for cheap</li> <li>Alexandros Papdopoulos (16) - Another super Greek striker. He doesn't want to join in the first season either. Buy him later and wait for a year or so. He will be great along with Skalidis</li> <li>Mike Duff (23)  - Cheap and reliable right back (that's why I sell Babbel). You will not need any right back any more.</li> <li>Ibrahim Said (21) - He can play both CB and DMC really well. That's why I sell Hamann. He is non-EU though so without patch you need to be careful</li> <li>Mark Kerr (19) - Young reliable MC. Not super flashy but get the job done.</li> <li>Isaac Okoronkwo (23) - CB and right back. Cheap and reliable. Non-EU player though';</li> <li>Taribo Wast (27) - CB and left back. Free transfer.</li> </ul> <p>Players to watch</p> <ul> <li>Cherno Samba (15) - The famous striker. I don't play long enough to see him thrive in my saves though</li> <li>Stephen McPhee (20) - He could turn into a great player. He wasn't great in one of my save though so you better watch how he progresses</li> <li>Fernando Cavenaghi (17) - I wanted to sign him but never. I assume that he is great.</li> </ul>"},{"location":"Programming/Java/Stream/stream/","title":"Stream API","text":""},{"location":"Programming/Java/Stream/stream/#boxed","title":"boxed()","text":"<p>Convert primitive array to List <pre><code>int[] input = new int[]{1,2,3,4};\nList&lt;Integer&gt; output = Arrays.stream(input).boxed().collect(Collectors.toList());\n</code></pre> Reference - https://www.baeldung.com/java-primitive-array-to-list</p>"},{"location":"System%20Admin/Disk/format/","title":"Formatting disk using CLI","text":""},{"location":"System%20Admin/Disk/format/#context","title":"Context","text":"<p>I have a new external harddrive that I want to use with my Ubuntu server. The server doesn't have GUI easily accessible so I want to format the drive via command line. Note that the command here is based on Ubuntu 20.04 that I have at the moment</p>"},{"location":"System%20Admin/Disk/format/#instruction","title":"Instruction","text":""},{"location":"System%20Admin/Disk/format/#checking-partition","title":"Checking partition","text":"<p>First, we need to check the drive/partition that the server is referring to the newly installed disk <pre><code>lsblk\n</code></pre></p> <p>or use -f option to also display the file system <pre><code>lsblk -f\n</code></pre></p> <p>This will show something like this <pre><code>NAME           MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nloop0            7:0    0  42.2M  1 loop /snap/snapd/14066\nloop1            7:1    0  61.9M  1 loop /snap/core20/1242\nloop2            7:2    0    73M  1 loop /snap/lxd/22147\nloop3            7:3    0  73.1M  1 loop /snap/lxd/22114\nloop4            7:4    0  55.5M  1 loop /snap/core18/2246\nloop6            7:6    0  43.3M  1 loop /snap/snapd/14295\nloop7            7:7    0  55.5M  1 loop /snap/core18/2253\nloop8            7:8    0  61.9M  1 loop /snap/core20/1270\nsda              8:0    0   477G  0 disk\n\u251c\u2500sda1           8:1    0   512M  0 part /boot/efi\n\u2514\u2500sda2           8:2    0 476.4G  0 part /\nsdc              8:32   0   1.8T  0 disk\n\u251c\u2500sdc1           8:33   0   1.6T  0 part /mnt/ABC\n\u251c\u2500sdc2           8:34   0     1K  0 part\n\u251c\u2500sdc5           8:37   0   100G  0 part\n\u2502 \u2514\u2500veracrypt1 253:0    0   100G  0 dm   /mnt/DEF\n\u2514\u2500sdc6           8:38   0   100G  0 part\n  \u2514\u2500veracrypt2 253:1    0   100G  0 dm   /mnt/GHI\nsdd              8:48   0   1.8T  0 disk\n\u251c\u2500sdd1           8:49   0   200M  0 part\n\u2514\u2500sdd2           8:50   0   1.8T  0 part\n  \u2514\u2500veracrypt3 253:2    0   1.8T  0 dm   /mnt/JKL\nsde              8:64   0   3.7T  0 disk\n\u251c\u2500sde1           8:65   0   128G  0 part /mnt/MNO\n\u2514\u2500sde2           8:66   0   3.5T  0 part\n  \u2514\u2500veracrypt4 253:3    0   3.5T  0 dm   /mnt/PQR\nsdf              8:80   0  10.9T  0 disk\n\u2514\u2500sdf1           8:81   0  10.9T  0 part /mnt/STU\nsr0             11:0    1  1024M  0 rom\n</code></pre></p> <p>Run this before and after connecting the drive so you will know which one is the disk you added. Get the drive name i.e. sdb (typically if it's the second drive of the server)</p>"},{"location":"System%20Admin/Disk/format/#formatting-the-disk","title":"Formatting the disk","text":"<p>My drive was preformatted with NTFS. Even though it works with Ubuntu, I want the drive to perform best in the environment and I don't plan to connect this drive to Windows machine. I plan to address compatibity by sharing this drive via Samba instead.</p> <ul> <li>In this case <code>/dev/sdg1</code> is my partition</li> </ul> <p>To format to ext4 <pre><code>sudo mkfs -t ext4 /dev/sdg1\n</code></pre></p> <p>To format to fat32 <pre><code>sudo mkfs -t vfat /dev/sdg1\n</code></pre></p> <p>To format to fat32 <pre><code>sudo mkfs -t ntfs /dev/sdg1\n</code></pre></p> <p>It will take a while. After it's done, check the file system again with <pre><code>lsblk -f\n</code></pre> Make sure it shows the file system you just chose and get the UUID <pre><code>sdg\n\u2514\u2500sdg1         ext4                &lt;uuid&gt;\n</code></pre></p>"},{"location":"System%20Admin/Disk/format/#mount-the-disk","title":"Mount the disk","text":"<ol> <li>Create mount point <pre><code>sudo mkdir -p &lt;mountpoint&gt;\n</code></pre></li> <li>Update <code>/etc/fstab</code> to mount the disk automatically <pre><code>sudo vi /etc/fstab\n</code></pre> Add a row like this. The config I use is for ext4 file system. For mounting ntfs or others, refer to <code>fstab</code> <pre><code>UUID=&lt;uuid&gt;      &lt;mountpoint&gt;      ext4    defaults,noatime                                0       0\n</code></pre></li> <li>Verify the mounting <code>fstab</code> will work after reboot so to mount the drive immediately after updating <code>fstab</code> run the following <pre><code># to mount the specific mountpoint\nsudo mount &lt;mountpoint&gt; # or, to mount all the mountpoints defined in fstab\nsudo mount -a </code></pre></li> </ol>"},{"location":"System%20Admin/Disk/format/#reference","title":"Reference","text":"<p>https://phoenixnap.com/kb/linux-format-disk</p>"},{"location":"System%20Admin/Docker/multiple_compose_files/","title":"How to have load multiple compose file","text":""},{"location":"System%20Admin/Docker/multiple_compose_files/#overview","title":"Overview","text":"<p>I wanted to split <code>docker-compose.yml</code> into multiple files - 1 service 1 file. So, in the main docker file, I could add/remove by just commenting out 1 line.</p>"},{"location":"System%20Admin/Docker/multiple_compose_files/#solution","title":"Solution","text":"<p>In version 2, docker has <code>extends</code> feature see reference here. However, this feature was removed in version 3. So I decided to use different approach</p>"},{"location":"System%20Admin/Docker/multiple_compose_files/#loading-multiple-filesa","title":"Loading multiple filesa","text":"<p>By default, docker compose will load <code>docker-compose.yml</code> and <code>docker-compose.override.yml</code> for compose files, and load <code>.env</code> for environment variable. Custom file can be specified with <code>-f</code> parameter.</p> <pre><code>docker-compose -f a.yml -f b.yml -f c.yml up\n</code></pre> <p>The file names here can be specified in <code>COMPOSE_FILE</code> environment variable. For example, <pre><code>COMPOSE_FILE=a.yml:b.yml:c.yml \n</code></pre></p> <p>And, since .env will be loaded by docker automatically, I can use this approach to load the service I want like this</p> .env<pre><code>COMPOSE_FILE=docker-compose.yml:service1.yml:service2.yml \n</code></pre>"},{"location":"System%20Admin/Docker/multiple_compose_files/#reference","title":"Reference","text":"<p>https://docs.docker.com/compose/reference/envvars/#compose_file</p>"},{"location":"System%20Admin/Homebrew/1.%20Installation/","title":"Installation","text":"<p>Homebrew can be installed in MacOS and Linux.</p> <ol> <li> <p>Run the following command <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre></p> </li> <li> <p>Set up shell environment <pre><code>echo '# Set PATH, MANPATH, etc., for Homebrew.' &gt;&gt; /home/thomsun/.zprofile\necho 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' &gt;&gt; /home/thomsun/.zprofile\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\n</code></pre></p> </li> <li> <p>Install additional packages </p> <p>Homebrew dependencies <pre><code>sudo apt-get install build-essential\n</code></pre></p> <p>Recommended by homebrew <pre><code>brew install gcc\n</code></pre></p> </li> </ol>"},{"location":"System%20Admin/Homebrew/2.%20Recommended%20Bottles/","title":"Bottles","text":""},{"location":"System%20Admin/Homebrew/2.%20Recommended%20Bottles/#fzf","title":"fzf","text":"<p>Fuzzy search utility</p> <ul> <li> <p>To install <code>fzf</code> <pre><code>brew install fzf\n</code></pre></p> </li> <li> <p>To install useful keybindings and fuzzy completion: <pre><code>$(brew --prefix)/opt/fzf/install\n</code></pre></p> </li> <li> <p>To use fzf in Vim, add the following line to your .vimrc: <pre><code>set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf\n</code></pre></p> </li> </ul>"},{"location":"System%20Admin/Homebrew/2.%20Recommended%20Bottles/#fasd","title":"fasd","text":"<p>CLI tool to quickly access file and directory</p> <ul> <li> <p>To install <code>fasd</code> <pre><code>brew install fasd\n</code></pre></p> </li> <li> <p>Add <code>fasd</code> plugin to <code>~/.zshrc</code> <pre><code>plugins=(\n    ...\n    fasd\n    ...\n)\n</code></pre></p> </li> </ul>"},{"location":"System%20Admin/Locale%20and%20Timezone/","title":"Locale and Timezone","text":""},{"location":"System%20Admin/Locale%20and%20Timezone/#locale","title":"Locale","text":"<p>To see current setting <pre><code>$ locale\n</code></pre></p> <p>To set locale <pre><code>$ sudo update-locale LANG=en_US.UTF-8\n</code></pre></p>"},{"location":"System%20Admin/Locale%20and%20Timezone/#timezone","title":"Timezone","text":"<p>To see current system time <pre><code>$ timedatectl\n</code></pre></p> <p>To list available timezone <pre><code>$ timedatectl list-timezones\n</code></pre></p> <p>To set timezone <pre><code>$ sudo timedatectl set-timezone America/Los_Angeles\n</code></pre></p>"},{"location":"System%20Admin/TMUX/1.%20Configuration/","title":"Configuration","text":"<p><code>tmux</code> is typically installed by default in Ubuntu. For MacOS, <code>tmux</code> can be installed via homebrew by</p> <pre><code>brew install tmux\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#oh-my-zsh-plugin","title":"oh-my-zsh plugin","text":"<p>Add <code>tmux</code> plugin in <code>~/.zshrc</code> as following <pre><code>plugins=(\n    ...\n    tmux\n    ...\n)\n</code></pre></p>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#tmux-config","title":"TMUX config","text":"<p>The following config can be added in <code>~/.tmux.conf</code></p>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#change-prefix-from-ctrl-b-to","title":"Change prefix from <code>Ctrl-b</code> to <code></code> `","text":"<pre><code># Remap prefix from 'C-b' to '`' (backtick). Double ` to type ` \nunbind C-b\nset-option -g prefix `\nbind-key ` send-prefix\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#enable-mouse-clicking-and-scrolling","title":"Enable mouse clicking and scrolling","text":"<pre><code># Enable mouse so clicking and scrolling mouse wheel works\nset -g mouse on\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#use-vi-key-for-navigation","title":"Use <code>vi</code> key for navigation","text":"<pre><code># Set vi key navigation\nset-window-option -g mode-keys vi\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#enable-more-colors","title":"Enable more colors","text":"<pre><code># Colorful! - tmux-sensible has this option set but somehow it gets loaded too late\nset-option -s default-terminal \"screen-256color\"\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#use-1-based-index-for-windows-and-panes","title":"Use 1-based index for windows and panes","text":"<pre><code># Start windows and panes at 1, not 0\nset -g base-index 1\nsetw -g pane-base-index 1\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#always-renumbering-the-windows","title":"Always renumbering the windows","text":"<pre><code># Renumber windows\nset-option -g renumber-windows on\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#increaseadjust-scrolling-buffer-size","title":"Increase/Adjust scrolling buffer size","text":"<pre><code># Increase scrolling buffer size\nset-option -g history-limit 25000\n</code></pre>"},{"location":"System%20Admin/TMUX/1.%20Configuration/#configure-copy-behavior","title":"Configure copy behavior","text":"<pre><code># Not exiting copy-mode after dragging\nunbind-key -T copy-mode-vi MouseDragEnd1Pane\n\n# Add 'y' to yank without exiting copy-mode\n# Note that 'Enter' will bind to 'copy-pipe-and-cancel' which will exit copy-mode\nbind-key -T copy-mode-vi y send-keys -X copy-selection\n</code></pre>"},{"location":"System%20Admin/TMUX/2.%20Plugins/","title":"Plugins","text":""},{"location":"System%20Admin/TMUX/2.%20Plugins/#tmux-plugins-manager-tpm","title":"Tmux Plugins Manager (TPM)","text":"<p>github repo plugins</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#clone-tpm","title":"Clone TPM","text":"<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n</code></pre>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#configure-tmuxconf","title":"Configure <code>~/.tmux.conf</code>","text":"<pre><code># List of plugins\nset -g @plugin 'tmux-plugins/tpm'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun '~/.tmux/plugins/tpm/tpm'\n</code></pre>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#reload-tmux-if-its-already-running","title":"Reload TMUX if it's already running","text":"<pre><code>tmux source ~/.tmux.conf\n</code></pre>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#tmux-sensible","title":"tmux-sensible","text":"<p>github repo</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#configure-tmuxconf_1","title":"Configure <code>~/.tmux.conf</code>","text":"<pre><code>set -g @plugin 'tmux-plugins/tmux-sensible'\n</code></pre> <p>Hit <code>prefix + I</code> to load the new plugin</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#recurrect-continuum","title":"Recurrect-Continuum","text":"<p>tmux-resurrect - Restore tmux environment after system restart tmux-continuum - Continuous saving of tmux environment</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#configure-tmuxconf_2","title":"Configure <code>~/.tmux.conf</code>","text":"<pre><code>## Resurrect-Continuum\n### https://github.com/tmux-plugins/tmux-resurrect \n### https://github.com/tmux-plugins/tmux-continuum\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-continuum'\n\n### To tell continuum to restore environment when tmux server starts\nset -g @continuum-restore 'on'\n\n### To tell continuum to save environment every 15 minutes\nset -g @continuum-save-interval '15'\n</code></pre> <p>Hit <code>prefix + I</code> to load the new plugin</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#pane-control","title":"Pane Control","text":"<p>tmux-pain-control - Adds standard pane navigation bindings.</p>"},{"location":"System%20Admin/TMUX/2.%20Plugins/#configure-tmuxconf_3","title":"Configure <code>~/.tmux.conf</code>","text":"<pre><code>## Pane Control - https://github.com/tmux-plugins/tmux-pain-control\nset -g @plugin 'tmux-plugins/tmux-pain-control'\nset-option -g @pane_resize \"1\"\n</code></pre> <p>Hit <code>prefix + I</code> to load the new plugin</p>"},{"location":"System%20Admin/TMUX/3.%20Theme/","title":"Theme","text":"<p>This is custom theme I made myself. </p> <ul> <li>Download the file here</li> <li>Unzip the file to get <code>.tmux_theme.sh</code></li> <li>Move the file to home directory (<code>~</code>)</li> <li>Make sure you turn execution flag on.      <pre><code>chmod +x ~/.tmux_theme.sh\n</code></pre></li> <li>Configure in <code>~/.tmux.conf</code> as following     <pre><code># Custom theme\nrun -b '~/.tmux_theme.sh'\n</code></pre></li> </ul>"},{"location":"System%20Admin/TMUX/4.%20Config%20File/","title":"Config File","text":"<ul> <li>Download the final <code>.tmux.conf</code> here</li> <li>Unzip the file and copy the file to home directory (<code>~</code>)</li> </ul>"},{"location":"System%20Admin/TMUX/5.%20Useful%20Commands/","title":"Useful Commands","text":"<p>Note that this can be based on my configuration.</p> <p>Reload <code>~/.tmux.conf</code> file</p> <ul> <li>Outside session - <code>tmux source ~/.tmux.conf</code></li> <li>Inside session - <code>Prefix + :</code> then <code>source ~/.tmux.conf</code></li> </ul> <p>Reload TPM plugin</p> <ul> <li>Run <code>Prefix + I</code> in the session</li> </ul> <p>List key binding</p> <ul> <li>Run <code>Prefix + :</code> then <code>list-keys</code></li> <li><code>Prefix + ?</code></li> </ul> <p>Copy mode</p> <ul> <li>Enter copy mode - <code>Prefix + [</code> or scroll mouse</li> <li>Switch to vertical mode in copy mode - <code>Ctrl + v</code></li> <li>Begin selection - <code>Space</code></li> <li>Clear selection - <code>Esc</code></li> <li>Copy without exiting copy mode - <code>y</code></li> <li>Copy and exit copy mode - <code>Enter</code></li> </ul> <p>Sessions</p> <ul> <li>Create session<ul> <li>Outside session <ul> <li>Normal tmux command - <code>tmux new-session -s &lt;session-name&gt;</code></li> <li>With oh-my-zsh plugin - <code>ts &lt;session-name&gt;</code></li> </ul> </li> <li>Inside session - <code>Prefix + :</code> then <code>new -s &lt;session-name&gt;</code></li> </ul> </li> <li>Rename session - <code>Prefix + $</code></li> <li>Detach session - <code>Prefix + d</code></li> <li>Delete session - <code>tmux kill-session -t &lt;session-name&gt;</code></li> <li>Attach session <ul> <li>Normal tmux command - <code>tmux attach -t &lt;session-name&gt;</code></li> <li>With oh-my-zsh plugin - <code>ta &lt;session-name&gt;</code></li> </ul> </li> <li>Attach session and detach other clients<ul> <li>Normal tmux command - <code>tmux attach -d -t &lt;session-name&gt;</code></li> <li>With oh-my-zsh plugin - <code>tad &lt;session-name&gt;</code></li> </ul> </li> <li>Show all sessions <ul> <li>Outside session - <code>tmux ls</code></li> <li>Inside session - <code>Prefix + s</code></li> </ul> </li> </ul> <p>Windows</p> <ul> <li>Create window - <code>Prefix + c</code></li> <li>Rename current window - <code>Prefix + ,</code></li> <li>Close current window - <code>Prefix + &amp;</code></li> <li>Previous current window - <code>Prefix + p</code></li> <li>Next current window - <code>Prefix + n</code></li> <li>Switch window by number - <code>Prefix + 0...9</code></li> <li>Swap windows with source (2) and destination (1) - <code>Prefix + :</code> then <code>swap-window -s 2 -t 1</code></li> <li>Move current window using relative position - <code>Prefix + :</code> then <code>swap-window -t -1</code> (left by 1 position)</li> </ul> <p>Panes</p> <p>With tmux-pain-control</p> <ul> <li>Split pane<ul> <li>Current pane left/right - <code>Prefix + |</code> </li> <li>Current pane up/down - <code>Prefix + -</code></li> <li>Full width left/right - <code>Prefix + \\</code></li> <li>Full height up/down - <code>Prefix + _</code></li> </ul> </li> <li>Navigation<ul> <li>Left - <code>Prefix + h</code> </li> <li>Down - <code>Prefix + j</code> </li> <li>Up - <code>Prefix + k</code> </li> <li>Right - <code>Prefix + l</code> </li> </ul> </li> <li>Resizing<ul> <li>Left - <code>Prefix + H</code> </li> <li>Down - <code>Prefix + J</code> </li> <li>Up - <code>Prefix + K</code> </li> <li>Right - <code>Prefix + L</code> </li> </ul> </li> <li>Synchronize panes <ul> <li>Start synchronizing - <code>Prefix + :</code> then <code>setw synchronize-panes</code></li> <li>Stop synchronizing - <code>Prefix + :</code> then <code>setw synchronize-panes off</code></li> </ul> </li> </ul>"},{"location":"System%20Admin/Text%20Manipulation/","title":"List of useful CLI","text":""},{"location":"System%20Admin/Text%20Manipulation/cut/","title":"cut","text":"<p>Remove sections from each line of files</p>"},{"location":"System%20Admin/Text%20Manipulation/cut/#to-get-specific-column","title":"To get specific column","text":"<pre><code>$ echo \"1,2,3,4,5\" | cut -d ',' -f 1-4\n1,2,3,4\n\n$ echo \"1,2,3,4,5\" | cut -d ',' -f 2-\n2,3,4,5\n\n$ echo \"1,2,3,4,5\" | cut -d ',' -f -3\n1,2,3\n</code></pre>"},{"location":"System%20Admin/Text%20Manipulation/sed/","title":"sed","text":"<p>Stream editer for filtering and transforming text</p>"},{"location":"System%20Admin/Text%20Manipulation/sed/#to-replace-simple-strings","title":"To replace simple strings","text":"<pre><code>$ echo \"before before before\" | sed 's/before/after/'\nafter before before\n\n# with 'g', sed will replace all instances in the lines\n$ echo \"before before before\" | sed 's/before/after/g'\nafter after after\n</code></pre>"},{"location":"System%20Admin/Text%20Manipulation/sed/#to-replace-strings-with-regex","title":"To replace strings with regex","text":"<pre><code>$ echo \"string1,ID-123,string2,ID-345\" | sed 's/,ID-[0-9]\\{3\\}//g'  string1,string2\n</code></pre>"},{"location":"System%20Admin/Text%20Manipulation/sed/#reference","title":"Reference","text":"<p>50 sed command examples</p>"},{"location":"System%20Admin/Text%20Manipulation/uniq/","title":"uniq","text":"<p>A utility to handle duplicate lines in a file. The input must be sorted before</p>"},{"location":"System%20Admin/Text%20Manipulation/uniq/#to-get-unique-lines","title":"To get unique lines","text":"<pre><code>sort file.txt | uniq\n</code></pre>"},{"location":"System%20Admin/Text%20Manipulation/uniq/#to-get-duplicate-lines","title":"To get duplicate lines","text":"<pre><code>sort file.txt | uniq -d\n</code></pre>"},{"location":"System%20Admin/Text%20Manipulation/uniq/#to-get-duplicate-count-unique-line-will-be-1","title":"To get duplicate count (unique line will be 1)","text":"<pre><code>sort file.txt | uniq -c\n</code></pre>"},{"location":"System%20Admin/oh-my-zsh/1.%20Installation/","title":"Installation","text":""},{"location":"System%20Admin/oh-my-zsh/1.%20Installation/#install-zsh-if-not-already-installed","title":"Install <code>zsh</code> if not already installed","text":"<p>If <code>zsh</code> is not installed, run the following to install <code>zsh</code></p> <p>Ubuntu <pre><code>sudo apt install zsh\n</code></pre></p> <p>MacOS (homebrew) <pre><code>brew install zsh\n</code></pre></p>"},{"location":"System%20Admin/oh-my-zsh/1.%20Installation/#make-zsh-default-shell","title":"Make <code>zsh</code> default shell","text":"<pre><code>chsh -s $(which zsh)\n</code></pre>"},{"location":"System%20Admin/oh-my-zsh/1.%20Installation/#install-oh-my-zsh","title":"Install <code>oh-my-zsh</code>","text":"<pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --unattended\"\n</code></pre>"},{"location":"System%20Admin/oh-my-zsh/2.%20Powerlevel10k/","title":"Powerlevel10k","text":""},{"location":"System%20Admin/oh-my-zsh/2.%20Powerlevel10k/#installation","title":"Installation","text":"<p>Powerlevel10k is a theme for zsh.</p> <ol> <li> <p>Run the following command <pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre></p> </li> <li> <p>Set <code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"</code> in <code>~/.zshrc</code></p> </li> <li>Run <code>exec zsh</code> to restart the shell. This will also tricker configuration wizard. If the wizard doesn't start, run <code>p10k configure</code> to start.</li> <li>Configure prompt as you like. The prompt config is generated at <code>~/.p10k.zsh</code></li> <li> <p>Modify vcs section of <code>~/p10k.zsh</code> as following (Optional)</p> <p>Change untracked icon <pre><code>typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='\\uF059 '\n</code></pre></p> <p>Change meta foreground <pre><code>local       meta='%7F' # white foreground\n</code></pre></p> <p>Add a set of icons definition as following <pre><code># CUSTOM - Add a set of icon definitions with spaces for proper display; copied from powerlevel9k\n# https://github.com/Powerlevel9k/powerlevel9k/blob/master/functions/icons.zsh\nlocal           commit_icon=$'\\uE729 '             # \ue729\nlocal    remote_branch_icon=$' \\uE728 '            # \ue728\nlocal incoming_changes_icon=$'\\uF01A '             # \uf01a\nlocal outgoing_changes_icon=$'\\uF01B '             # \uf01b\nlocal            stash_icon=$'\\uF01C '             # \uf01c\nlocal           staged_icon=$'\\uF055 '             # \uf055\nlocal         unstaged_icon=$'\\uF06A '             # \uf06a\nlocal         conflict_icon=$'\\uF071 '             # \uf071\n</code></pre></p> <p>Use the above definition as following <pre><code># \u21e342 if behind the remote.\n(( VCS_STATUS_COMMITS_BEHIND )) &amp;&amp; res+=\" ${clean}${incoming_changes_icon}${VCS_STATUS_COMMITS_BEHIND}\"\n# \u21e142 if ahead of the remote; no leading space if also behind the remote: \u21e342\u21e142.\n(( VCS_STATUS_COMMITS_AHEAD &amp;&amp; !VCS_STATUS_COMMITS_BEHIND )) &amp;&amp; res+=\" \"\n(( VCS_STATUS_COMMITS_AHEAD  )) &amp;&amp; res+=\" ${clean}${outgoing_changes_icon}${VCS_STATUS_COMMITS_AHEAD}\"\n# \u21e042 if behind the push remote.\n(( VCS_STATUS_PUSH_COMMITS_BEHIND )) &amp;&amp; res+=\" ${clean}\u21e0${VCS_STATUS_PUSH_COMMITS_BEHIND}\"\n(( VCS_STATUS_PUSH_COMMITS_AHEAD &amp;&amp; !VCS_STATUS_PUSH_COMMITS_BEHIND )) &amp;&amp; res+=\" \"\n# \u21e242 if ahead of the push remote; no leading space if also behind: \u21e042\u21e242.\n(( VCS_STATUS_PUSH_COMMITS_AHEAD  )) &amp;&amp; res+=\"${clean}\u21e2${VCS_STATUS_PUSH_COMMITS_AHEAD}\"\n# *42 if have stashes.\n(( VCS_STATUS_STASHES        )) &amp;&amp; res+=\" ${clean}${stash_icon}${VCS_STATUS_STASHES}\"\n# 'merge' if the repo is in an unusual state.\n[[ -n $VCS_STATUS_ACTION     ]] &amp;&amp; res+=\" ${conflicted}${VCS_STATUS_ACTION}\"\n# ~42 if have merge conflicts.\n(( VCS_STATUS_NUM_CONFLICTED )) &amp;&amp; res+=\" ${conflicted}${conflict_icon}${VCS_STATUS_NUM_CONFLICTED}\"\n# +42 if have staged changes.\n(( VCS_STATUS_NUM_STAGED     )) &amp;&amp; res+=\" ${modified}${staged_icon}${VCS_STATUS_NUM_STAGED}\"\n# !42 if have unstaged changes.\n(( VCS_STATUS_NUM_UNSTAGED   )) &amp;&amp; res+=\" ${modified}${unstaged_icon}${VCS_STATUS_NUM_UNSTAGED}\"\n</code></pre></p> </li> </ol>"},{"location":"System%20Admin/oh-my-zsh/3.%20MISC%20Plugins/","title":"MISC Plugins","text":""},{"location":"System%20Admin/oh-my-zsh/3.%20MISC%20Plugins/#zsh-syntax-highlighting","title":"zsh-syntax-highlighting","text":"<ol> <li> <p>Run the following command <pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting \n</code></pre></p> </li> <li> <p>Add <code>zsh-syntax-highlighting</code> plugin to <code>~/.zshrc</code> <pre><code>plugins=(\n    ...\n    zsh-syntax-highlighting\n    ...\n)\n</code></pre></p> </li> </ol>"},{"location":"System%20Admin/oh-my-zsh/3.%20MISC%20Plugins/#zsh-autosuggestions","title":"zsh-autosuggestions","text":"<ol> <li> <p>Run the following command <pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre></p> </li> <li> <p>Add <code>zsh-autosuggestions</code> plugin to <code>~/.zshrc</code> <pre><code>plugins=(\n    ...\n    zsh-autosuggestions\n    ...\n)\n</code></pre></p> </li> </ol>"},{"location":"System%20Admin/selfhosted/MkDocs/","title":"MkDocs","text":""},{"location":"System%20Admin/selfhosted/MkDocs/#overview","title":"Overview","text":"<p>mkdocs is static site generator aiming for technical documentation.</p>"},{"location":"System%20Admin/selfhosted/MkDocs/#installation","title":"Installation","text":""},{"location":"System%20Admin/selfhosted/MkDocs/#prerequisite","title":"Prerequisite","text":"<p>MkDocs requires python 3 and pip. See installation details here</p> <p>I have python2 installed by default so I install python3 using Homebrew that comes with pip3 <pre><code>brew install python3\n</code></pre> Verify python and pip version <pre><code>$ python3 --version\nPython 3.9.2\n$ pip3 --version\npip 21.0.1 from /usr/local/lib/python3.9/site-packages/pip (python 3.9)\n</code></pre></p>"},{"location":"System%20Admin/selfhosted/MkDocs/#installing-mkdocs","title":"Installing MkDocs","text":"<pre><code>pip3 install mkdocs\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/#themes-and-plugins","title":"Themes and Plugins","text":""},{"location":"System%20Admin/selfhosted/MkDocs/#themes","title":"Themes","text":"<ul> <li><code>mkdocs-material</code> - Material theme for MkDocs</li> </ul>"},{"location":"System%20Admin/selfhosted/MkDocs/#plugins","title":"Plugins","text":"<ul> <li><code>mkdocs-git-revision-date-localized-plugin</code> - Plugin to pull and display git update timestamp on the page</li> </ul>"},{"location":"System%20Admin/selfhosted/MkDocs/#_1","title":"MkDocs","text":""},{"location":"System%20Admin/selfhosted/MkDocs/#publishing","title":"Publishing","text":""},{"location":"System%20Admin/selfhosted/MkDocs/#publish-to-github-pages","title":"Publish to github pages","text":"<p>GitHub Pages provide documentation hosting for free. There are 2 options - Organization/User site and Project site. </p> <p>Organization/User site is to host documentation at .github.io, while Project site is to host documentation at .github.io/. See https://pages.github.com/ for set up details <p>The easiest way to publish MkDocs website to GitHub Pages in my option is to use GitHub Action.</p> .github/workflows/ci.yml<pre><code>name: ci # Any name as you like\non:\npush:\nbranches:\n- main # Branch to track\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\nwith:\nfetch-depth: 0 # To fetch all history to support mkdocs-git-revision-date-localized-plugin\n- uses: actions/setup-python@v2\nwith:\npython-version: 3.x\n# Install mkdocs and any themes/plugin here\n- run: pip install mkdocs\n- run: pip install mkdocs-material\n- run: pip install mkdocs-git-revision-date-localized-plugin\n# Deploy to gh-pages branch\n- run: mkdocs gh-deploy --force\n</code></pre> <p><code>mkdocs gh-deploy</code> is usting github cli behind the scene. It builds the site and call <code>ghp-import</code> to commit to <code>gh-pages</code> branch. So it's important to set <code>pages</code> setting to use <code>gh-pages</code> branch for website. This means the markdown files will be in <code>main</code> branch while the compiled html will be published to github pages via <code>gh-pages</code> branch.</p>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/","title":"mkdocs-awesome-pages-plugin","text":""},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#overview","title":"Overview","text":"<p>MkDocs has <code>nav</code> configuration in mkdocs.yml to set up navigation of the page. If it's not provided, the navigation will be automatically created by all markdown files in the document directory. </p> <p>We need to use one, not both. And, the auto create will be sorted alphabetically, which is not flexible. This plugin allows us to have more control. </p>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#installation","title":"Installation","text":"<p>Install the plugin with pip</p> <pre><code>pip install mkdocs-awesome-pages-plugin\n</code></pre> <p>Enable the plugin in <code>mkdocs.yml</code></p> mkdocs.yml<pre><code>plugins:\n- search\n- awesome-pages\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#configuration","title":"Configuration","text":""},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#rest","title":"Rest","text":"<p><code>...</code> is a special entry to let MkDocs to add the rest from the folder structure</p> <pre><code>nav:\n- introduction.md\n- ...\n- summary.md\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/","title":"mkdocs-git-revision-date-localized-plugin","text":""},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#overview","title":"Overview","text":"<p><code>mkdocs-git-revision-date-localized-plugin</code> is MkDocs plugin to add a last updated date to MkDocs pages. This is a fork of <code>mkdocs-git-revision-date-plugin</code></p> <p>See the doc at https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/</p>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#installation","title":"Installation","text":""},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#installing-plugin","title":"Installing plugin","text":"<pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuring-mkdocs","title":"Configuring MkDocs","text":"mkdocs.yml<pre><code>plugins:\n- search\n- git-revision-date-localized\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#optional","title":"Optional","text":""},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuring-github-action","title":"Configuring github action","text":".github/workflows/ci.yaml<pre><code>- uses: actions/checkout@v2\nwith:\nfetch-depth: 0\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#usage","title":"Usage","text":"<p>With support theme like <code>mkdocs-material</code>, the last update value will be displayed at the end of the page automatically.</p> <p>Page can add creation time or last update time using variables <code>git_creation_date_localized</code> and <code>git_revision_date_localized</code></p> <p>Custom create date = 2021-12-12 15:56:12 Custom update date = 2021-12-18 14:35:12</p>"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuration","title":"Configuration","text":"<p>See plugin's option page for details</p> mkdocs.yml<pre><code>plugins:\n- git-revision-date-localized:\ntype: timeago\ntimezone: Europe/Amsterdam\nlocale: en\nfallback_to_build_date: false\nenable_creation_date: true\nexclude:\n- index.md\nenabled: true\n</code></pre>"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/","title":"mkdocs-material","text":""},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#overview","title":"Overview","text":"<p>Material for MkDocs (mkdocs-material) is a theme for MkDocs.</p>"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#installation","title":"Installation","text":"<p>Install theme via pip <pre><code>pip install mkdocs-material\n</code></pre></p>"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#configuration","title":"Configuration","text":""},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>MkDocs provides 2 ways to set up syntax highlighting - during building using Pygments or during runtime using JavaScript.</p> <p>Here is how to set up with Pygments i.e. build time highlighting.</p> <p>See reference for code blocks here</p> mkdocs.yml<pre><code>markdown_extensions:\n- pymdownx.highlight:\nanchor_linenums: true\n- pymdownx.inlinehilite\n- pymdownx.snippets\n- pymdownx.superfences\n</code></pre>"},{"location":"System%20Admin/selfhosted/samba/","title":"Samba","text":""},{"location":"System%20Admin/selfhosted/samba/#configuration","title":"Configuration","text":"<p>To allow samba to follow symlinks <pre><code># Global\nallow insecure wide links = yes \n\n# Profile\nfollow symlinks = yes\nwide links = yes\n</code></pre></p> <p>To allow older version of samba client to connect <pre><code>server min protocol = NT1\n</code></pre></p>"},{"location":"System%20Admin/selfhosted/samba/#administration","title":"Administration","text":"<p>To add samba user</p> <ol> <li> <p>Add user linux user account first <pre><code>sudo useradd john\nsudo passwd john\n</code></pre></p> </li> <li> <p>Add Samba user <pre><code>sudo smbpasswd -a john\n</code></pre></p> </li> <li> <p>To modify existing user <pre><code>sudo smbpasswd john\n</code></pre></p> </li> </ol> <p>To restart samba server <pre><code>sudo service smbd restart\n</code></pre></p> <p>To add existing user to a group <pre><code>sudo usermod -a -G &lt;group&gt; &lt;user&gt;\n</code></pre></p> <p>To add a new group <pre><code>sudo groupadd mynewgroup\n</code></pre></p>"}]}