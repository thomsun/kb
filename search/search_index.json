{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome!","title":"Home"},{"location":"#welcome","text":"","title":"Welcome!"},{"location":"about/","text":"About To be created!","title":"About"},{"location":"about/#about","text":"To be created!","title":"About"},{"location":"Coding%20Interview/Problems/HR/plus_minus/","text":"Plus Minus Problem Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with 6 places after the decimal. Solution The calculation is simple. The key is to format the number correctly. As all of us know, double/float in Java can be weird. Solution 1: Use printf formatting Calculate the percentage normall and use printf formatting to format the number. This is probably the most straightforward way to solve this problem public static void plusMinus ( List < Integer > arr ) { double p = 0 , n = 0 , z = 0 ; for ( int i : arr ) { if ( i == 0 ) z ++ ; else if ( i < 0 ) n ++ ; else if ( i > 0 ) p ++ ; } System . out . printf ( \"%8.6f\\n\" , p / arr . size ()); System . out . printf ( \"%8.6f\\n\" , n / arr . size ()); System . out . printf ( \"%8.6f\\n\" , z / arr . size ()); } Solution 2: Use BigDecimal We can use BigDecimal to do calculation with speficy precision. This is probably a bit overkill for interview solution. But, use BigDecimal is a good practice if your appliation is related to cost or money where it has a specific way to round the number. Note that when dividing numbers using BigDecimal, we should always set scale otherwise it can throws ArithmeticException as by default it will try to return exact precision. public static void plusMinus ( List < Integer > arr ) { int p = 0 , n = 0 , z = 0 ; for ( int i : arr ) { if ( i == 0 ) z ++ ; else if ( i < 0 ) n ++ ; else if ( i > 0 ) p ++ ; } BigDecimal size = BigDecimal . valueOf ( arr . size ()); System . out . println ( BigDecimal . valueOf ( p ). divide ( size , 6 , RoundingMode . HALF_UP )); System . out . println ( BigDecimal . valueOf ( n ). divide ( size , 6 , RoundingMode . HALF_UP )); System . out . println ( BigDecimal . valueOf ( z ). divide ( size , 6 , RoundingMode . HALF_UP )); }","title":"Plus Minus"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#plus-minus","text":"","title":"Plus Minus"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#problem","text":"Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with 6 places after the decimal.","title":"Problem"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution","text":"The calculation is simple. The key is to format the number correctly. As all of us know, double/float in Java can be weird.","title":"Solution"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution-1-use-printf-formatting","text":"Calculate the percentage normall and use printf formatting to format the number. This is probably the most straightforward way to solve this problem public static void plusMinus ( List < Integer > arr ) { double p = 0 , n = 0 , z = 0 ; for ( int i : arr ) { if ( i == 0 ) z ++ ; else if ( i < 0 ) n ++ ; else if ( i > 0 ) p ++ ; } System . out . printf ( \"%8.6f\\n\" , p / arr . size ()); System . out . printf ( \"%8.6f\\n\" , n / arr . size ()); System . out . printf ( \"%8.6f\\n\" , z / arr . size ()); }","title":"Solution 1: Use printf formatting"},{"location":"Coding%20Interview/Problems/HR/plus_minus/#solution-2-use-bigdecimal","text":"We can use BigDecimal to do calculation with speficy precision. This is probably a bit overkill for interview solution. But, use BigDecimal is a good practice if your appliation is related to cost or money where it has a specific way to round the number. Note that when dividing numbers using BigDecimal, we should always set scale otherwise it can throws ArithmeticException as by default it will try to return exact precision. public static void plusMinus ( List < Integer > arr ) { int p = 0 , n = 0 , z = 0 ; for ( int i : arr ) { if ( i == 0 ) z ++ ; else if ( i < 0 ) n ++ ; else if ( i > 0 ) p ++ ; } BigDecimal size = BigDecimal . valueOf ( arr . size ()); System . out . println ( BigDecimal . valueOf ( p ). divide ( size , 6 , RoundingMode . HALF_UP )); System . out . println ( BigDecimal . valueOf ( n ). divide ( size , 6 , RoundingMode . HALF_UP )); System . out . println ( BigDecimal . valueOf ( z ). divide ( size , 6 , RoundingMode . HALF_UP )); }","title":"Solution 2: Use BigDecimal"},{"location":"System%20Admin/Disk/format/","text":"Formatting disk using CLI Context I have a new external harddrive that I want to use with my Ubuntu server. The server doesn't have GUI easily accessible so I want to format the drive via command line. Note that the command here is based on Ubuntu 20.04 that I have at the moment Instruction Checking partition First, we need to check the drive/partition that the server is referring to the newly installed disk lsblk or use -f option to also display the file system lsblk -f This will show something like this NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 42.2M 1 loop /snap/snapd/14066 loop1 7:1 0 61.9M 1 loop /snap/core20/1242 loop2 7:2 0 73M 1 loop /snap/lxd/22147 loop3 7:3 0 73.1M 1 loop /snap/lxd/22114 loop4 7:4 0 55.5M 1 loop /snap/core18/2246 loop6 7:6 0 43.3M 1 loop /snap/snapd/14295 loop7 7:7 0 55.5M 1 loop /snap/core18/2253 loop8 7:8 0 61.9M 1 loop /snap/core20/1270 sda 8:0 0 477G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u2514\u2500sda2 8:2 0 476.4G 0 part / sdc 8:32 0 1.8T 0 disk \u251c\u2500sdc1 8:33 0 1.6T 0 part /mnt/ABC \u251c\u2500sdc2 8:34 0 1K 0 part \u251c\u2500sdc5 8:37 0 100G 0 part \u2502 \u2514\u2500veracrypt1 253:0 0 100G 0 dm /mnt/DEF \u2514\u2500sdc6 8:38 0 100G 0 part \u2514\u2500veracrypt2 253:1 0 100G 0 dm /mnt/GHI sdd 8:48 0 1.8T 0 disk \u251c\u2500sdd1 8:49 0 200M 0 part \u2514\u2500sdd2 8:50 0 1.8T 0 part \u2514\u2500veracrypt3 253:2 0 1.8T 0 dm /mnt/JKL sde 8:64 0 3.7T 0 disk \u251c\u2500sde1 8:65 0 128G 0 part /mnt/MNO \u2514\u2500sde2 8:66 0 3.5T 0 part \u2514\u2500veracrypt4 253:3 0 3.5T 0 dm /mnt/PQR sdf 8:80 0 10.9T 0 disk \u2514\u2500sdf1 8:81 0 10.9T 0 part /mnt/STU sr0 11:0 1 1024M 0 rom Run this before and after connecting the drive so you will know which one is the disk you added. Get the drive name i.e. sdb (typically if it's the second drive of the server) Formatting the disk My drive was preformatted with NTFS. Even though it works with Ubuntu, I want the drive to perform best in the environment and I don't plan to connect this drive to Windows machine. I plan to address compatibity by sharing this drive via Samba instead. In this case /dev/sdg1 is my partition To format to ext4 sudo mkfs -t ext4 /dev/sdg1 To format to fat32 sudo mkfs -t vfat /dev/sdg1 To format to fat32 sudo mkfs -t ntfs /dev/sdg1 It will take a while. After it's done, check the file system again with lsblk -f Make sure it shows the file system you just chose and get the UUID sdg \u2514\u2500sdg1 ext4 <uuid> Mount the disk Create mount point sudo mkdir -p <mountpoint> Update /etc/fstab to mount the disk automatically sudo vi /etc/fstab Add a row like this. The config I use is for ext4 file system. For mounting ntfs or others, refer to fstab UUID=<uuid> <mountpoint> ext4 defaults,noatime 0 0 Verify the mounting fstab will work after reboot so to mount the drive immediately after updating fstab run the following # to mount the specific mountpoint sudo mount <mountpoint> # or, to mount all the mountpoints defined in fstab sudo mount -a Reference https://phoenixnap.com/kb/linux-format-disk","title":"Formatting disk using CLI"},{"location":"System%20Admin/Disk/format/#formatting-disk-using-cli","text":"","title":"Formatting disk using CLI"},{"location":"System%20Admin/Disk/format/#context","text":"I have a new external harddrive that I want to use with my Ubuntu server. The server doesn't have GUI easily accessible so I want to format the drive via command line. Note that the command here is based on Ubuntu 20.04 that I have at the moment","title":"Context"},{"location":"System%20Admin/Disk/format/#instruction","text":"","title":"Instruction"},{"location":"System%20Admin/Disk/format/#checking-partition","text":"First, we need to check the drive/partition that the server is referring to the newly installed disk lsblk or use -f option to also display the file system lsblk -f This will show something like this NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 42.2M 1 loop /snap/snapd/14066 loop1 7:1 0 61.9M 1 loop /snap/core20/1242 loop2 7:2 0 73M 1 loop /snap/lxd/22147 loop3 7:3 0 73.1M 1 loop /snap/lxd/22114 loop4 7:4 0 55.5M 1 loop /snap/core18/2246 loop6 7:6 0 43.3M 1 loop /snap/snapd/14295 loop7 7:7 0 55.5M 1 loop /snap/core18/2253 loop8 7:8 0 61.9M 1 loop /snap/core20/1270 sda 8:0 0 477G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u2514\u2500sda2 8:2 0 476.4G 0 part / sdc 8:32 0 1.8T 0 disk \u251c\u2500sdc1 8:33 0 1.6T 0 part /mnt/ABC \u251c\u2500sdc2 8:34 0 1K 0 part \u251c\u2500sdc5 8:37 0 100G 0 part \u2502 \u2514\u2500veracrypt1 253:0 0 100G 0 dm /mnt/DEF \u2514\u2500sdc6 8:38 0 100G 0 part \u2514\u2500veracrypt2 253:1 0 100G 0 dm /mnt/GHI sdd 8:48 0 1.8T 0 disk \u251c\u2500sdd1 8:49 0 200M 0 part \u2514\u2500sdd2 8:50 0 1.8T 0 part \u2514\u2500veracrypt3 253:2 0 1.8T 0 dm /mnt/JKL sde 8:64 0 3.7T 0 disk \u251c\u2500sde1 8:65 0 128G 0 part /mnt/MNO \u2514\u2500sde2 8:66 0 3.5T 0 part \u2514\u2500veracrypt4 253:3 0 3.5T 0 dm /mnt/PQR sdf 8:80 0 10.9T 0 disk \u2514\u2500sdf1 8:81 0 10.9T 0 part /mnt/STU sr0 11:0 1 1024M 0 rom Run this before and after connecting the drive so you will know which one is the disk you added. Get the drive name i.e. sdb (typically if it's the second drive of the server)","title":"Checking partition"},{"location":"System%20Admin/Disk/format/#formatting-the-disk","text":"My drive was preformatted with NTFS. Even though it works with Ubuntu, I want the drive to perform best in the environment and I don't plan to connect this drive to Windows machine. I plan to address compatibity by sharing this drive via Samba instead. In this case /dev/sdg1 is my partition To format to ext4 sudo mkfs -t ext4 /dev/sdg1 To format to fat32 sudo mkfs -t vfat /dev/sdg1 To format to fat32 sudo mkfs -t ntfs /dev/sdg1 It will take a while. After it's done, check the file system again with lsblk -f Make sure it shows the file system you just chose and get the UUID sdg \u2514\u2500sdg1 ext4 <uuid>","title":"Formatting the disk"},{"location":"System%20Admin/Disk/format/#mount-the-disk","text":"Create mount point sudo mkdir -p <mountpoint> Update /etc/fstab to mount the disk automatically sudo vi /etc/fstab Add a row like this. The config I use is for ext4 file system. For mounting ntfs or others, refer to fstab UUID=<uuid> <mountpoint> ext4 defaults,noatime 0 0 Verify the mounting fstab will work after reboot so to mount the drive immediately after updating fstab run the following # to mount the specific mountpoint sudo mount <mountpoint> # or, to mount all the mountpoints defined in fstab sudo mount -a","title":"Mount the disk"},{"location":"System%20Admin/Disk/format/#reference","text":"https://phoenixnap.com/kb/linux-format-disk","title":"Reference"},{"location":"System%20Admin/selfhosted/MkDocs/","text":"MkDocs Overview mkdocs is static site generator aiming for technical documentation. Installation Prerequisite MkDocs requires python 3 and pip. See installation details here I have python2 installed by default so I install python3 using Homebrew that comes with pip3 brew install python3 Verify python and pip version $ python3 --version Python 3 .9.2 $ pip3 --version pip 21 .0.1 from /usr/local/lib/python3.9/site-packages/pip ( python 3 .9 ) Installing MkDocs pip3 install mkdocs Themes and Plugins Themes mkdocs-material - Material theme for MkDocs Plugins mkdocs-git-revision-date-localized-plugin - Plugin to pull and display git update timestamp on the page Publishing Publish to github pages GitHub Pages provide documentation hosting for free. There are 2 options - Organization/User site and Project site. Organization/User site is to host documentation at .github.io, while Project site is to host documentation at .github.io/ . See https://pages.github.com/ for set up details The easiest way to publish MkDocs website to GitHub Pages in my option is to use GitHub Action . .github/workflows/ci.yml name : ci # Any name as you like on : push : branches : - main # Branch to track jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 # To fetch all history to support mkdocs-git-revision-date-localized-plugin - uses : actions/setup-python@v2 with : python-version : 3.x # Install mkdocs and any themes/plugin here - run : pip install mkdocs - run : pip install mkdocs-material - run : pip install mkdocs-git-revision-date-localized-plugin # Deploy to gh-pages branch - run : mkdocs gh-deploy --force mkdocs gh-deploy is usting github cli behind the scene. It builds the site and call ghp-import to commit to gh-pages branch. So it's important to set pages setting to use gh-pages branch for website. This means the markdown files will be in main branch while the compiled html will be published to github pages via gh-pages branch.","title":"MkDocs"},{"location":"System%20Admin/selfhosted/MkDocs/#mkdocs","text":"","title":"MkDocs"},{"location":"System%20Admin/selfhosted/MkDocs/#overview","text":"mkdocs is static site generator aiming for technical documentation.","title":"Overview"},{"location":"System%20Admin/selfhosted/MkDocs/#installation","text":"","title":"Installation"},{"location":"System%20Admin/selfhosted/MkDocs/#prerequisite","text":"MkDocs requires python 3 and pip. See installation details here I have python2 installed by default so I install python3 using Homebrew that comes with pip3 brew install python3 Verify python and pip version $ python3 --version Python 3 .9.2 $ pip3 --version pip 21 .0.1 from /usr/local/lib/python3.9/site-packages/pip ( python 3 .9 )","title":"Prerequisite"},{"location":"System%20Admin/selfhosted/MkDocs/#installing-mkdocs","text":"pip3 install mkdocs","title":"Installing MkDocs"},{"location":"System%20Admin/selfhosted/MkDocs/#themes-and-plugins","text":"","title":"Themes and Plugins"},{"location":"System%20Admin/selfhosted/MkDocs/#themes","text":"mkdocs-material - Material theme for MkDocs","title":"Themes"},{"location":"System%20Admin/selfhosted/MkDocs/#plugins","text":"mkdocs-git-revision-date-localized-plugin - Plugin to pull and display git update timestamp on the page","title":"Plugins"},{"location":"System%20Admin/selfhosted/MkDocs/#_1","text":"","title":""},{"location":"System%20Admin/selfhosted/MkDocs/#publishing","text":"","title":"Publishing"},{"location":"System%20Admin/selfhosted/MkDocs/#publish-to-github-pages","text":"GitHub Pages provide documentation hosting for free. There are 2 options - Organization/User site and Project site. Organization/User site is to host documentation at .github.io, while Project site is to host documentation at .github.io/ . See https://pages.github.com/ for set up details The easiest way to publish MkDocs website to GitHub Pages in my option is to use GitHub Action . .github/workflows/ci.yml name : ci # Any name as you like on : push : branches : - main # Branch to track jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 # To fetch all history to support mkdocs-git-revision-date-localized-plugin - uses : actions/setup-python@v2 with : python-version : 3.x # Install mkdocs and any themes/plugin here - run : pip install mkdocs - run : pip install mkdocs-material - run : pip install mkdocs-git-revision-date-localized-plugin # Deploy to gh-pages branch - run : mkdocs gh-deploy --force mkdocs gh-deploy is usting github cli behind the scene. It builds the site and call ghp-import to commit to gh-pages branch. So it's important to set pages setting to use gh-pages branch for website. This means the markdown files will be in main branch while the compiled html will be published to github pages via gh-pages branch.","title":"Publish to github pages"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/","text":"mkdocs-awesome-pages-plugin Overview MkDocs has nav configuration in mkdocs.yml to set up navigation of the page. If it's not provided, the navigation will be automatically created by all markdown files in the document directory. We need to use one, not both. And, the auto create will be sorted alphabetically, which is not flexible. This plugin allows us to have more control. Installation Install the plugin with pip pip install mkdocs-awesome-pages-plugin Enable the plugin in mkdocs.yml mkdocs.yml plugins : - search - awesome-pages Configuration Rest ... is a special entry to let MkDocs to add the rest from the folder structure nav : - introduction.md - ... - summary.md","title":"mkdocs-awesome-pages-plugin"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#mkdocs-awesome-pages-plugin","text":"","title":"mkdocs-awesome-pages-plugin"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#overview","text":"MkDocs has nav configuration in mkdocs.yml to set up navigation of the page. If it's not provided, the navigation will be automatically created by all markdown files in the document directory. We need to use one, not both. And, the auto create will be sorted alphabetically, which is not flexible. This plugin allows us to have more control.","title":"Overview"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#installation","text":"Install the plugin with pip pip install mkdocs-awesome-pages-plugin Enable the plugin in mkdocs.yml mkdocs.yml plugins : - search - awesome-pages","title":"Installation"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#configuration","text":"","title":"Configuration"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-awesome-pages-plugin/#rest","text":"... is a special entry to let MkDocs to add the rest from the folder structure nav : - introduction.md - ... - summary.md","title":"Rest"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/","text":"mkdocs-git-revision-date-localized-plugin Overview mkdocs-git-revision-date-localized-plugin is MkDocs plugin to add a last updated date to MkDocs pages. This is a fork of mkdocs-git-revision-date-plugin See the doc at https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/ Installation Installing plugin pip install mkdocs-git-revision-date-localized-plugin Configuring MkDocs mkdocs.yml plugins : - search - git-revision-date-localized Optional Configuring github action .github/workflows/ci.yaml - uses : actions/checkout@v2 with : fetch-depth : 0 Usage With support theme like mkdocs-material , the last update value will be displayed at the end of the page automatically. Page can add creation time or last update time using variables git_creation_date_localized and git_revision_date_localized Custom create date = 2021-12-18 22:35:12 Custom update date = 2021-12-18 22:35:12 Configuration See plugin's option page for details mkdocs.yml plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md enabled : true","title":"mkdocs-git-revision-date-localized-plugin"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#mkdocs-git-revision-date-localized-plugin","text":"","title":"mkdocs-git-revision-date-localized-plugin"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#overview","text":"mkdocs-git-revision-date-localized-plugin is MkDocs plugin to add a last updated date to MkDocs pages. This is a fork of mkdocs-git-revision-date-plugin See the doc at https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/","title":"Overview"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#installation","text":"","title":"Installation"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#installing-plugin","text":"pip install mkdocs-git-revision-date-localized-plugin","title":"Installing plugin"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuring-mkdocs","text":"mkdocs.yml plugins : - search - git-revision-date-localized","title":"Configuring MkDocs"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#optional","text":"","title":"Optional"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuring-github-action","text":".github/workflows/ci.yaml - uses : actions/checkout@v2 with : fetch-depth : 0","title":"Configuring github action"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#usage","text":"With support theme like mkdocs-material , the last update value will be displayed at the end of the page automatically. Page can add creation time or last update time using variables git_creation_date_localized and git_revision_date_localized Custom create date = 2021-12-18 22:35:12 Custom update date = 2021-12-18 22:35:12","title":"Usage"},{"location":"System%20Admin/selfhosted/MkDocs/plugins/mkdocs-git-revision-date-localized-plugin/#configuration","text":"See plugin's option page for details mkdocs.yml plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md enabled : true","title":"Configuration"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/","text":"mkdocs-material Overview Material for MkDocs (mkdocs-material) is a theme for MkDocs. Installation Install theme via pip pip install mkdocs-material Configuration Syntax Highlighting MkDocs provides 2 ways to set up syntax highlighting - during building using Pygments or during runtime using JavaScript. Here is how to set up with Pygments i.e. build time highlighting. See reference for code blocks here mkdocs.yml markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences","title":"mkdocs-material"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#mkdocs-material","text":"","title":"mkdocs-material"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#overview","text":"Material for MkDocs (mkdocs-material) is a theme for MkDocs.","title":"Overview"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#installation","text":"Install theme via pip pip install mkdocs-material","title":"Installation"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#configuration","text":"","title":"Configuration"},{"location":"System%20Admin/selfhosted/MkDocs/themes/mkdocs-material/#syntax-highlighting","text":"MkDocs provides 2 ways to set up syntax highlighting - during building using Pygments or during runtime using JavaScript. Here is how to set up with Pygments i.e. build time highlighting. See reference for code blocks here mkdocs.yml markdown_extensions : - pymdownx.highlight : anchor_linenums : true - pymdownx.inlinehilite - pymdownx.snippets - pymdownx.superfences","title":"Syntax Highlighting"}]}